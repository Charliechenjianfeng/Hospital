/*
 Navicat Premium Data Transfer

 Source Server         : local
 Source Server Type    : MySQL
 Source Server Version : 80017
 Source Host           : localhost:3306
 Source Schema         : hospital

 Target Server Type    : MySQL
 Target Server Version : 80017
 File Encoding         : 65001

 Date: 22/03/2021 17:23:07
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for billingdetails
-- ----------------------------
DROP TABLE IF EXISTS `billingdetails`;
CREATE TABLE `billingdetails`  (
  `detailsId` int(10) NOT NULL AUTO_INCREMENT COMMENT '账单id',
  `registrationId` int(10) NULL DEFAULT NULL COMMENT '挂号id',
  `drugName` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '药瓶名',
  `drugNumber` int(10) NULL DEFAULT NULL COMMENT '药品数量',
  `perPrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '单价',
  `totalPrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '总价',
  `pStatus` tinyint(2) NULL DEFAULT NULL COMMENT '挂号状态',
  `checkStatus` tinyint(1) NULL DEFAULT NULL COMMENT '项目是否检查 0:还未检查：1已经检查',
  `payStatus` tinyint(1) NULL DEFAULT NULL COMMENT '是否已经缴费',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`detailsId`) USING BTREE,
  INDEX `挂号外键`(`registrationId`) USING BTREE,
  CONSTRAINT `挂号外键` FOREIGN KEY (`registrationId`) REFERENCES `registration` (`registrationId`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 22 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '这个是保存用户账单的表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of billingdetails
-- ----------------------------
INSERT INTO `billingdetails` VALUES (1, NULL, NULL, 10, 30.00, 300.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (2, NULL, NULL, 2, 30.00, 60.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (3, 10, NULL, 1, 30.00, 30.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (4, 10, NULL, 2, 30.00, 60.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (5, 10, NULL, 2, 30.00, 60.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (6, 10, NULL, 1, 30.00, 30.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (7, 10, NULL, 1, 30.00, 0.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (8, 10, NULL, 3, 30.00, 90.00, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `billingdetails` VALUES (9, 10, NULL, 2, 501.00, 1002.00, NULL, 0, 0, '2021-03-15 01:09:45', '2021-03-15 01:09:45');
INSERT INTO `billingdetails` VALUES (10, 10, '阿莫西林', 1, 30.00, 30.00, NULL, NULL, 0, '2021-03-15 01:10:15', '2021-03-15 01:10:15');
INSERT INTO `billingdetails` VALUES (11, 11, '葡萄糖水', 3, 501.00, 1503.00, NULL, 0, 0, '2021-03-15 01:11:15', '2021-03-15 01:11:15');
INSERT INTO `billingdetails` VALUES (12, 10, '挂号费', 1, NULL, NULL, NULL, NULL, 0, NULL, NULL);
INSERT INTO `billingdetails` VALUES (13, 10, '挂号费', 1, NULL, NULL, NULL, NULL, 0, NULL, NULL);
INSERT INTO `billingdetails` VALUES (14, 11, '挂号费', 1, NULL, NULL, NULL, NULL, 0, NULL, NULL);
INSERT INTO `billingdetails` VALUES (15, 10, '挂号费', 1, 20.17, 20.17, NULL, NULL, 0, NULL, NULL);
INSERT INTO `billingdetails` VALUES (16, 12, '阿莫西林', 20, 30.00, 600.00, NULL, NULL, 1, '2021-03-16 00:56:28', '2021-03-16 00:56:28');
INSERT INTO `billingdetails` VALUES (17, 12, '挂号费', 1, 20.17, 20.17, NULL, NULL, 1, '2021-03-16 01:03:19', '2021-03-16 01:03:19');
INSERT INTO `billingdetails` VALUES (18, 12, '挂号费', 1, 20.17, 20.17, NULL, NULL, 1, '2021-03-16 01:03:19', '2021-03-16 01:03:19');
INSERT INTO `billingdetails` VALUES (19, 12, '挂号费', 1, 20.17, 20.17, NULL, NULL, 1, '2021-03-16 01:03:19', '2021-03-16 01:03:19');
INSERT INTO `billingdetails` VALUES (20, 12, '挂号费', 1, 20.17, 20.17, NULL, NULL, 1, '2021-03-16 01:03:19', '2021-03-16 01:03:19');
INSERT INTO `billingdetails` VALUES (21, 12, '阿莫西林', 11, 30.00, 330.00, NULL, NULL, 1, '2021-03-16 01:45:24', '2021-03-16 01:45:24');
INSERT INTO `billingdetails` VALUES (22, 12, '葡萄糖水', 23, 501.00, 11523.00, NULL, 0, 1, '2021-03-16 01:45:32', '2021-03-16 01:45:32');
INSERT INTO `billingdetails` VALUES (23, 13, '阿莫西林', 39, 30.00, 1170.00, NULL, NULL, 1, '2021-03-22 01:06:53', '2021-03-22 01:06:53');
INSERT INTO `billingdetails` VALUES (24, 13, '非法手段', 39, 22.00, 858.00, NULL, NULL, 1, '2021-03-22 01:07:02', '2021-03-22 01:07:02');
INSERT INTO `billingdetails` VALUES (25, 13, '阿莫西林', 39, 30.00, 1170.00, NULL, NULL, 1, '2021-03-22 01:07:02', '2021-03-22 01:07:02');
INSERT INTO `billingdetails` VALUES (26, 13, '阿莫西林', 23, 30.00, 690.00, NULL, NULL, 1, '2021-03-22 01:10:18', '2021-03-22 01:10:18');
INSERT INTO `billingdetails` VALUES (27, 13, '板蓝根', 11, 30.00, 330.00, NULL, NULL, 1, '2021-03-22 01:10:31', '2021-03-22 01:10:31');
INSERT INTO `billingdetails` VALUES (28, 13, '挂号费', 1, 20.17, 20.17, NULL, NULL, 1, '2021-03-22 01:17:32', '2021-03-22 01:17:32');
INSERT INTO `billingdetails` VALUES (29, 13, '阿莫西林', 12, 30.00, 360.00, NULL, NULL, 1, '2021-03-22 01:17:53', '2021-03-22 01:17:53');
INSERT INTO `billingdetails` VALUES (30, 13, '阿莫西林', 22, 30.00, 660.00, NULL, NULL, 1, '2021-03-22 01:17:59', '2021-03-22 01:17:59');
INSERT INTO `billingdetails` VALUES (31, 13, '板蓝根', 22, 30.00, 660.00, NULL, NULL, 1, '2021-03-22 01:17:59', '2021-03-22 01:17:59');
INSERT INTO `billingdetails` VALUES (32, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:21:46', '2021-03-22 01:21:46');
INSERT INTO `billingdetails` VALUES (33, 13, '景天', 10, 33.00, 330.00, NULL, NULL, 1, '2021-03-22 01:43:45', '2021-03-22 01:43:45');
INSERT INTO `billingdetails` VALUES (34, 13, '景天', 10, 33.00, 330.00, NULL, NULL, 1, '2021-03-22 01:43:52', '2021-03-22 01:43:52');
INSERT INTO `billingdetails` VALUES (35, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:43:52', '2021-03-22 01:43:52');
INSERT INTO `billingdetails` VALUES (36, 13, '板蓝根', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:44:10', '2021-03-22 01:44:10');
INSERT INTO `billingdetails` VALUES (37, 13, '沉香1', 10, 100.45, 1004.50, NULL, NULL, 1, '2021-03-22 01:44:32', '2021-03-22 01:44:32');
INSERT INTO `billingdetails` VALUES (38, 13, '沉香1', 10, 100.45, 1004.50, NULL, NULL, 1, '2021-03-22 01:44:37', '2021-03-22 01:44:37');
INSERT INTO `billingdetails` VALUES (39, 13, '非法手段', 10, 22.00, 220.00, NULL, NULL, 1, '2021-03-22 01:44:37', '2021-03-22 01:44:37');
INSERT INTO `billingdetails` VALUES (40, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:49:33', '2021-03-22 01:49:33');
INSERT INTO `billingdetails` VALUES (41, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:49:38', '2021-03-22 01:49:38');
INSERT INTO `billingdetails` VALUES (42, 13, '板蓝根', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:49:38', '2021-03-22 01:49:38');
INSERT INTO `billingdetails` VALUES (43, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:55:37', '2021-03-22 01:55:37');
INSERT INTO `billingdetails` VALUES (44, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:55:45', '2021-03-22 01:55:45');
INSERT INTO `billingdetails` VALUES (45, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:55:45', '2021-03-22 01:55:45');
INSERT INTO `billingdetails` VALUES (46, 13, '板蓝根', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:55:45', '2021-03-22 01:55:45');
INSERT INTO `billingdetails` VALUES (47, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:56:18', '2021-03-22 01:56:18');
INSERT INTO `billingdetails` VALUES (48, 13, '阿莫西林', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:56:23', '2021-03-22 01:56:23');
INSERT INTO `billingdetails` VALUES (49, 13, '板蓝根', 10, 30.00, 300.00, NULL, NULL, 1, '2021-03-22 01:56:23', '2021-03-22 01:56:23');
INSERT INTO `billingdetails` VALUES (50, 13, '阿莫西林', 1, 30.00, 30.00, NULL, NULL, 0, '2021-03-22 02:01:51', '2021-03-22 02:01:51');
INSERT INTO `billingdetails` VALUES (51, 13, '板蓝根', 2, 30.00, 60.00, NULL, NULL, 0, '2021-03-22 02:01:55', '2021-03-22 02:01:55');

-- ----------------------------
-- Table structure for department
-- ----------------------------
DROP TABLE IF EXISTS `department`;
CREATE TABLE `department`  (
  `departmentId` tinyint(2) NOT NULL AUTO_INCREMENT COMMENT '科室id',
  `departmentName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '科室名',
  `pid` int(10) NULL DEFAULT NULL COMMENT '父id',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`departmentId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 55 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of department
-- ----------------------------
INSERT INTO `department` VALUES (1, '非手术科', 0, '2021-03-02 16:32:34', '2021-03-02 16:32:37');
INSERT INTO `department` VALUES (2, '手术科', 0, '2021-03-02 16:32:39', '2021-03-02 16:32:41');
INSERT INTO `department` VALUES (3, '诊断相关科室', 0, '2021-03-02 16:32:45', '2021-03-02 16:32:47');
INSERT INTO `department` VALUES (4, '内科学系', 1, '2021-03-07 20:50:10', '2021-03-07 20:50:12');
INSERT INTO `department` VALUES (5, '心内科', 1, '2021-03-07 20:51:36', '2021-03-07 20:51:39');
INSERT INTO `department` VALUES (6, '呼吸与危重症医学科', 1, '2021-03-07 20:51:42', '2021-03-07 20:51:44');
INSERT INTO `department` VALUES (7, '消化内科', 1, '2021-03-20 19:28:01', '2021-03-20 19:28:04');
INSERT INTO `department` VALUES (8, '肾内科', 1, '2021-03-20 19:28:06', '2021-03-20 19:28:09');
INSERT INTO `department` VALUES (9, '血液内科', 1, '2021-03-20 19:28:12', '2021-03-20 19:28:14');
INSERT INTO `department` VALUES (10, '风湿免疫科', 1, '2021-03-20 19:28:17', '2021-03-20 19:28:22');
INSERT INTO `department` VALUES (11, '感染内科', 1, '2021-03-20 19:28:24', '2021-03-20 19:28:29');
INSERT INTO `department` VALUES (12, '全科医学科（普通内科）', 1, '2021-03-20 19:28:31', '2021-03-20 19:28:33');
INSERT INTO `department` VALUES (13, '肿瘤内科', 1, '2021-03-20 19:28:36', '2021-03-20 19:28:39');
INSERT INTO `department` VALUES (14, 'MICU', 1, NULL, NULL);
INSERT INTO `department` VALUES (15, '老年医学科', 1, NULL, NULL);
INSERT INTO `department` VALUES (16, '内分泌科', 1, NULL, NULL);
INSERT INTO `department` VALUES (17, '重症医学科', 1, NULL, NULL);
INSERT INTO `department` VALUES (18, '儿科', 1, NULL, NULL);
INSERT INTO `department` VALUES (19, '神经科', 1, NULL, NULL);
INSERT INTO `department` VALUES (20, '心理医学科', 1, NULL, NULL);
INSERT INTO `department` VALUES (21, '皮肤科', 1, NULL, NULL);
INSERT INTO `department` VALUES (22, '变态反应科', 1, NULL, NULL);
INSERT INTO `department` VALUES (23, '急诊科', 1, NULL, NULL);
INSERT INTO `department` VALUES (24, '中医科', 1, NULL, NULL);
INSERT INTO `department` VALUES (25, '物理医学康复科', 1, NULL, NULL);
INSERT INTO `department` VALUES (26, '临床营养科', 1, NULL, NULL);
INSERT INTO `department` VALUES (27, '外科学系', 2, NULL, NULL);
INSERT INTO `department` VALUES (28, '基本外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (29, '骨科', 2, NULL, NULL);
INSERT INTO `department` VALUES (30, '心外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (31, '胸外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (32, '泌尿外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (33, '神经外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (34, '血管外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (35, '整形美容外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (36, '乳腺外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (37, '肝脏外科', 2, NULL, NULL);
INSERT INTO `department` VALUES (38, '麻醉科', 2, NULL, NULL);
INSERT INTO `department` VALUES (39, '妇产科', 2, NULL, NULL);
INSERT INTO `department` VALUES (40, '眼科', 2, NULL, NULL);
INSERT INTO `department` VALUES (41, '耳鼻喉科', 2, NULL, NULL);
INSERT INTO `department` VALUES (42, '口腔科', 2, NULL, NULL);
INSERT INTO `department` VALUES (43, '超声医学科', 3, NULL, NULL);
INSERT INTO `department` VALUES (44, '病理科', 3, NULL, NULL);
INSERT INTO `department` VALUES (45, '检验科', 3, NULL, NULL);
INSERT INTO `department` VALUES (46, '放射科', 3, NULL, NULL);
INSERT INTO `department` VALUES (47, '放射治疗科', 3, NULL, NULL);
INSERT INTO `department` VALUES (48, '核医学科', 3, NULL, NULL);
INSERT INTO `department` VALUES (49, '药剂科', 3, NULL, NULL);
INSERT INTO `department` VALUES (50, '病案科', 3, NULL, NULL);

-- ----------------------------
-- Table structure for doctor
-- ----------------------------
DROP TABLE IF EXISTS `doctor`;
CREATE TABLE `doctor`  (
  `doctorId` int(10) NOT NULL AUTO_INCREMENT COMMENT '医生id',
  `doctorName` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '医生名',
  `age` tinyint(3) NULL DEFAULT NULL COMMENT '年龄',
  `phone` char(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电话',
  `sex` tinyint(1) NULL DEFAULT NULL COMMENT '性别',
  `departmentId` tinyint(2) NOT NULL COMMENT '内科/外科',
  `typeId` tinyint(1) NULL DEFAULT NULL COMMENT '专家/超级专家',
  `outpatient` tinyint(1) NULL DEFAULT NULL COMMENT '门诊/住院',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`doctorId`) USING BTREE,
  INDEX `科室`(`departmentId`) USING BTREE,
  INDEX `医生类型`(`typeId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 100003 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of doctor
-- ----------------------------
INSERT INTO `doctor` VALUES (4, 'd1', 22, '17806705333', 1, 4, 1, NULL, '2021-03-12 17:48:44', '2021-03-12 18:23:56');
INSERT INTO `doctor` VALUES (100001, '夏维波', 34, '17806707100', 1, 4, 1, 0, '2021-03-02 16:33:01', '2021-03-02 16:33:04');
INSERT INTO `doctor` VALUES (100002, '邢小平', 44, '17806707101', 1, 4, 2, 0, '2021-03-02 16:33:06', '2021-03-02 16:33:09');
INSERT INTO `doctor` VALUES (100003, '方全', 55, '17806707102', 1, 4, 3, 0, '2021-03-02 16:33:11', '2021-03-02 16:33:14');

-- ----------------------------
-- Table structure for drugdictionary
-- ----------------------------
DROP TABLE IF EXISTS `drugdictionary`;
CREATE TABLE `drugdictionary`  (
  `drugId` int(11) NOT NULL AUTO_INCREMENT COMMENT '药品id',
  `drugName` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '药品名',
  `unitsId` int(11) NULL DEFAULT NULL COMMENT '单位',
  `sellingPrice` double NULL DEFAULT NULL COMMENT '售价',
  `areaId` int(11) NULL DEFAULT NULL COMMENT '产地',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`drugId`) USING BTREE,
  INDEX `单位1`(`unitsId`) USING BTREE,
  CONSTRAINT `单位1` FOREIGN KEY (`unitsId`) REFERENCES `units` (`unitsId`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of drugdictionary
-- ----------------------------
INSERT INTO `drugdictionary` VALUES (9, '阿莫西林', 1, 30, 4, '2021-03-12 23:04:36', '2021-03-12 23:04:40');
INSERT INTO `drugdictionary` VALUES (10, '板蓝根', 2, 30, 4, '2021-03-12 23:04:42', '2021-03-12 23:04:45');
INSERT INTO `drugdictionary` VALUES (15, '景天', 1, 33, NULL, '2021-03-13 01:31:39', '2021-03-13 01:31:39');
INSERT INTO `drugdictionary` VALUES (16, '沉香1', 1, 100.45, NULL, '2021-03-13 01:32:23', '2021-03-13 01:51:45');
INSERT INTO `drugdictionary` VALUES (17, 'sdfsd', 1, 100.45, NULL, '2021-03-13 21:23:38', '2021-03-13 21:23:38');
INSERT INTO `drugdictionary` VALUES (18, '非法手段', 1, 22, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (19, '多少', 2, 22, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (20, '范德萨', 2, 33, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (21, '热热', 3, 334, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (22, '大饭店', 2, 423, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (23, '撒旦发射点 ', 4, 322, NULL, NULL, '2021-03-13 21:26:26');
INSERT INTO `drugdictionary` VALUES (24, 'c草地上的', 3, 22, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (25, '撒旦发射点', 2, 22, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (26, '删除v从vv', 2, 11, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (27, '产生的', 2, 33, NULL, NULL, NULL);
INSERT INTO `drugdictionary` VALUES (28, '查找', 4, 222, NULL, NULL, '2021-03-13 21:27:49');

-- ----------------------------
-- Table structure for medicalproject
-- ----------------------------
DROP TABLE IF EXISTS `medicalproject`;
CREATE TABLE `medicalproject`  (
  `projectId` int(10) NOT NULL AUTO_INCREMENT COMMENT '项目id',
  `projectName` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '项目名称',
  `unitsId` int(10) NULL DEFAULT NULL COMMENT '单位',
  `sellingPrice` decimal(10, 2) NULL DEFAULT NULL COMMENT '售价',
  `checkStatus` tinyint(1) NULL DEFAULT NULL COMMENT '是否需要检查',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`projectId`) USING BTREE,
  INDEX `项目单位`(`unitsId`) USING BTREE,
  CONSTRAINT `项目单位` FOREIGN KEY (`unitsId`) REFERENCES `units` (`unitsId`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of medicalproject
-- ----------------------------
INSERT INTO `medicalproject` VALUES (1, '葡萄糖水', 2, 501.00, 0, '2021-03-11 21:26:42', '2021-03-13 21:43:27');
INSERT INTO `medicalproject` VALUES (2, 'CT', 4, 1000.00, NULL, '2021-03-13 21:44:22', '2021-03-13 21:44:22');

-- ----------------------------
-- Table structure for medicare
-- ----------------------------
DROP TABLE IF EXISTS `medicare`;
CREATE TABLE `medicare`  (
  `medicareId` tinyint(1) NOT NULL AUTO_INCREMENT COMMENT '医保id',
  `medicareType` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '医保类型',
  `discount` decimal(10, 2) NULL DEFAULT NULL COMMENT '折扣',
  PRIMARY KEY (`medicareId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '这个是医保卡' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of medicare
-- ----------------------------
INSERT INTO `medicare` VALUES (1, '无医保', 0.00);
INSERT INTO `medicare` VALUES (2, '城镇职工医疗保险', 0.30);
INSERT INTO `medicare` VALUES (3, '城镇居民医疗保险', 0.35);
INSERT INTO `medicare` VALUES (4, '新型农村合作医疗', 0.40);

-- ----------------------------
-- Table structure for registration
-- ----------------------------
DROP TABLE IF EXISTS `registration`;
CREATE TABLE `registration`  (
  `registrationId` int(10) NOT NULL AUTO_INCREMENT COMMENT '挂号id',
  `patientName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '病人名称',
  `sex` tinyint(1) NULL DEFAULT NULL COMMENT '性别1男0女',
  `age` tinyint(3) NULL DEFAULT NULL COMMENT '年龄',
  `departmentId` tinyint(3) NULL DEFAULT NULL COMMENT '内科/外科',
  `doctorId` int(10) NULL DEFAULT NULL COMMENT '医生id',
  `typeId` tinyint(3) NULL DEFAULT NULL COMMENT '专家/超级专家',
  `price` decimal(10, 2) NULL DEFAULT NULL COMMENT '价格',
  `createMan` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `rstatus` tinyint(1) NULL DEFAULT NULL COMMENT '状态',
  `phone` char(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '电话号码',
  `idCard` char(18) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '身份证',
  `rdescribe` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '病情描述',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`registrationId`) USING BTREE,
  INDEX `医生外键1`(`doctorId`) USING BTREE,
  INDEX `医生类型`(`typeId`) USING BTREE,
  INDEX `科室外键`(`departmentId`) USING BTREE,
  CONSTRAINT `医生外键1` FOREIGN KEY (`doctorId`) REFERENCES `doctor` (`doctorId`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `医生类型` FOREIGN KEY (`typeId`) REFERENCES `registrationtype` (`typeId`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `科室外键` FOREIGN KEY (`departmentId`) REFERENCES `department` (`departmentId`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '这个是挂号用的表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of registration
-- ----------------------------
INSERT INTO `registration` VALUES (1, '网易宝', 1, 22, 1, 100001, 1, 20.00, 'admin', 4, '17806707115', '441424199901031178', NULL, '2021-03-03 22:56:06', '2021-03-03 22:56:09');
INSERT INTO `registration` VALUES (2, '陈建锋', 1, 22, 4, 100001, 1, 20.17, NULL, 1, '17806707101', '3234', NULL, '2021-03-07 22:55:13', '2021-03-07 22:55:13');
INSERT INTO `registration` VALUES (3, 'sdfsd', 1, 33, 4, 100001, 1, 20.17, NULL, 1, '17806707006', '232323', NULL, '2021-03-07 23:57:56', '2021-03-07 23:57:56');
INSERT INTO `registration` VALUES (5, '陈建锋', 1, 22, 4, 100001, 1, 20.17, '管理员1', 1, '17806707002', '234234', NULL, '2021-03-08 00:16:05', '2021-03-08 22:24:18');
INSERT INTO `registration` VALUES (6, '陈建锋', 1, 23, 4, 100002, 2, 40.00, '管理员1', 1, '17806707999', '211', NULL, '2021-03-08 00:19:54', '2021-03-08 22:28:51');
INSERT INTO `registration` VALUES (9, '陈建锋', 1, 22, 4, 100001, 1, 20.17, '管理员1', NULL, '17806707111', '111', NULL, NULL, '2021-03-08 18:29:43');
INSERT INTO `registration` VALUES (10, '和', 1, 22, 4, 100001, 1, 20.17, 'admin', 1, '17806707111', '2222', 'dddddwweed', '2021-03-15 15:44:38', '2021-03-14 15:44:41');
INSERT INTO `registration` VALUES (11, '手术', 1, 22, 4, 100001, 1, 20.17, 'admin', 1, '17806707111', '1111', '咳嗽、感冒、发烧', '2021-03-15 00:31:35', '2021-03-15 00:31:37');
INSERT INTO `registration` VALUES (12, '陈建锋', 1, 22, 4, 100001, 1, 20.17, '管理员1', 1, '17806707011', '3333', 'dd', '2021-03-16 00:56:08', '2021-03-16 00:56:08');
INSERT INTO `registration` VALUES (13, '陈建锋', 1, 22, 4, 100001, 1, 20.17, '管理员1', 2, '17806707009', '423231', '冠军的就', '2021-03-22 01:06:35', '2021-03-22 01:06:35');
INSERT INTO `registration` VALUES (14, 'sdfsd', 0, 11, 4, 100001, 1, 20.17, '管理员1', 1, '17806707233', '1323234', NULL, '2021-03-22 02:32:31', '2021-03-22 02:32:31');

-- ----------------------------
-- Table structure for registrationtype
-- ----------------------------
DROP TABLE IF EXISTS `registrationtype`;
CREATE TABLE `registrationtype`  (
  `typeId` tinyint(1) NOT NULL AUTO_INCREMENT COMMENT '类型id',
  `type` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类型',
  `price` decimal(10, 2) NULL DEFAULT NULL COMMENT '价格',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`typeId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of registrationtype
-- ----------------------------
INSERT INTO `registrationtype` VALUES (1, '普通挂号', 20.17, '2021-03-04 16:06:20', '2021-03-04 16:06:24');
INSERT INTO `registrationtype` VALUES (2, '专家挂号', 40.00, '2021-03-04 16:06:26', '2021-03-04 16:06:28');
INSERT INTO `registrationtype` VALUES (3, '超级专家', 200.00, '2021-03-04 16:06:31', '2021-03-04 16:06:34');

-- ----------------------------
-- Table structure for sys_access_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_access_log`;
CREATE TABLE `sys_access_log`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `createTime` datetime(0) NOT NULL COMMENT '创建时间',
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `exceptionDetail` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '异常详情',
  `logType` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '日志类型[info, error...]',
  `method` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '执行方法名称',
  `params` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '参数名称',
  `requestIp` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '请求IP',
  `time` bigint(20) NULL DEFAULT NULL COMMENT '请求耗时',
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `browser` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '浏览器',
  `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'IP来源',
  `status` tinyint(4) NULL DEFAULT NULL COMMENT '请求结果[0:失败, 1:成功]',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_accessLog_createTime`(`createTime`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2067 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_access_log
-- ----------------------------
INSERT INTO `sys_access_log` VALUES (1777, '2020-08-07 22:02:25', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 2002, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1778, '2020-08-07 22:02:36', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 29, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1779, '2020-08-07 22:02:44', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 31, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1780, '2020-08-07 22:11:59', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 13, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1781, '2020-08-07 22:30:10', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 3, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1782, '2020-08-07 22:53:44', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 10, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1783, '2020-08-07 22:53:46', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 6, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1784, '2020-08-07 23:04:06', '访问归档页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 101, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1785, '2020-08-07 23:04:14', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 1, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1786, '2020-08-07 23:04:19', '访问归档页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 3, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1787, '2020-08-07 23:04:20', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 7, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1788, '2020-08-07 23:04:21', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 45, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1789, '2020-08-07 23:07:03', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 4, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1790, '2020-08-07 23:07:33', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 5, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1791, '2020-08-07 23:07:39', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 2, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1792, '2020-08-07 23:09:37', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 4, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1793, '2020-08-07 23:16:30', '访客登录', 'site.alanliang.geekblog.exception.BadRequestException: 用户名/邮箱不存在\r\n	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.login(VisitorServiceImpl.java:87)\r\n	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$95d815d4.login(<generated>)\r\n	at site.alanliang.geekblog.controller.front.VisitorsController.login(VisitorsController.java:54)\r\n	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)\r\n	at jdk.internal.reflect.GeneratedMethodAccessor635.invoke(Unknown Source)\r\n	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$ba62adc0.login(<generated>)\r\n	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.base/java.lang.Thread.run(Thread.java:830)\r\n', 'ERROR', 'site.alanliang.geekblog.controller.front.VisitorsController.login()', '{ visitorLoginVO: VisitorLoginVO(certificate=admin, password=e10adc3949ba59abbe56e057f20f883e) }', '0:0:0:0:0:0:0:1', 12, 'admin', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1794, '2020-08-07 23:16:51', '访客登录', 'site.alanliang.geekblog.exception.BadRequestException: 用户名/邮箱不存在\r\n	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.login(VisitorServiceImpl.java:87)\r\n	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)\r\n	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$95d815d4.login(<generated>)\r\n	at site.alanliang.geekblog.controller.front.VisitorsController.login(VisitorsController.java:54)\r\n	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)\r\n	at jdk.internal.reflect.GeneratedMethodAccessor635.invoke(Unknown Source)\r\n	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$ba62adc0.login(<generated>)\r\n	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.base/java.lang.Thread.run(Thread.java:830)\r\n', 'ERROR', 'site.alanliang.geekblog.controller.front.VisitorsController.login()', '{ visitorLoginVO: VisitorLoginVO(certificate=auditor001, password=e10adc3949ba59abbe56e057f20f883e) }', '0:0:0:0:0:0:0:1', 1, 'admin', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1795, '2020-08-07 23:17:36', '访客登录', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.VisitorsController.login()', '{ visitorLoginVO: VisitorLoginVO(certificate=visitor001, password=e10adc3949ba59abbe56e057f20f883e) }', '0:0:0:0:0:0:0:1', 5, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1796, '2020-08-07 23:26:35', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 4, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1797, '2020-08-07 23:26:37', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 2, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1798, '2020-08-07 23:26:39', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 2, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1799, '2020-08-07 23:26:40', '访问归档页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 4, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1800, '2020-08-07 23:26:41', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 59, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1801, '2020-08-07 23:35:45', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 7, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1802, '2020-08-08 12:17:32', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1551, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1803, '2020-08-08 12:25:51', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 6, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1804, '2020-08-08 12:26:48', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1200, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1805, '2020-08-08 12:27:02', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 16, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1806, '2020-08-08 12:27:30', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 407, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1807, '2020-08-08 12:57:51', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 13, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1808, '2020-08-08 13:02:25', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 9, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1809, '2020-08-08 13:04:00', '访问归档页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 71, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1810, '2020-08-08 13:14:43', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 71, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1811, '2020-08-08 13:14:44', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 23, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1812, '2020-08-08 13:15:01', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 3, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1813, '2020-08-08 13:15:04', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 7, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1814, '2020-08-08 13:19:45', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 5, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1815, '2020-08-08 13:21:12', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 6, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1816, '2020-08-08 13:21:17', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 58, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1817, '2020-08-08 13:21:21', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 4, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1818, '2020-08-08 14:32:39', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 140, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1819, '2020-08-08 14:55:34', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1207, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1820, '2020-08-08 23:03:19', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 54, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1821, '2020-08-08 23:03:42', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 43, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1822, '2020-08-08 23:12:03', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 13, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1823, '2020-08-08 23:13:33', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 4, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1824, '2020-08-08 23:15:19', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 1, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1825, '2020-08-08 23:17:10', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 13, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1826, '2020-08-08 23:23:48', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 6, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1827, '2020-08-11 22:23:38', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1566, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1828, '2020-08-11 22:27:25', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 185, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1829, '2020-08-11 22:27:58', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 18, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1830, '2020-08-11 22:28:00', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 18, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1831, '2020-08-11 22:40:58', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 14, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1832, '2020-08-11 22:49:55', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 6, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1833, '2020-08-11 22:49:57', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 9, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1834, '2020-08-11 23:45:54', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 45, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1835, '2020-08-11 23:58:55', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 10, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1836, '2020-08-11 23:59:01', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 4, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1837, '2020-08-15 17:13:41', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 1702, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1838, '2020-08-15 17:15:07', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 29, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1839, '2020-08-15 17:15:27', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 39, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1840, '2020-08-15 19:01:36', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1477, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1841, '2020-08-15 19:01:40', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 136, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1842, '2020-08-15 19:02:29', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 31, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1843, '2020-08-16 21:02:03', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 2053, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1844, '2020-08-16 21:12:55', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 40, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1845, '2020-08-16 21:14:26', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 5, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1846, '2020-08-16 21:15:05', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1193, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1847, '2020-08-16 21:15:17', '访问标签页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 35, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1848, '2020-08-16 21:15:20', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 28, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1849, '2020-08-16 21:17:08', '访问分类页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 2, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1850, '2020-08-16 21:17:12', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 62, 'admin', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1851, '2020-08-16 21:42:54', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 1421, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1852, '2020-08-16 21:43:16', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 28, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1853, '2020-08-16 21:44:28', '访问首页', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 5, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1854, '2020-08-17 01:09:26', '访问关于我页面', NULL, 'INFO', 'site.alanliang.geekblog.controller.front.AboutController.about()', '{ dateFilterType: 2 }', '0:0:0:0:0:0:0:1', 1565, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1855, '2021-02-28 15:44:58', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1856, '2021-02-28 16:06:17', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=管理, description=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 124, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1857, '2021-02-28 16:06:17', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=管理, description=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 5, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1858, '2021-02-28 16:06:21', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=管理员, description=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1859, '2021-02-28 17:08:30', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1860, '2021-03-01 22:52:55', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 84, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1861, '2021-03-01 23:01:39', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 18, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1862, '2021-03-01 23:09:43', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1863, '2021-03-01 23:10:44', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 108, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1864, '2021-03-02 13:24:04', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1865, '2021-03-02 13:24:06', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1866, '2021-03-02 13:57:17', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1867, '2021-03-02 13:58:31', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1868, '2021-03-02 13:58:49', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1869, '2021-03-02 13:59:59', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 71, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1885, '2021-03-15 12:25:42', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 146, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1886, '2021-03-15 13:13:23', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1887, '2021-03-15 14:59:00', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 14, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1888, '2021-03-15 14:59:44', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1889, '2021-03-15 15:00:13', '访问项目页面', NULL, 'INFO', 'com.educational.demo.controller.AdminProjectController.listByPage()', '{ page: 1 limit: 15 projectQuery: ProjectQuery(projectName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 27, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1890, '2021-03-15 15:00:16', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 17, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1891, '2021-03-15 16:03:07', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1892, '2021-03-15 16:03:24', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1893, '2021-03-15 16:03:34', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1894, '2021-03-15 16:04:53', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 17, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1895, '2021-03-15 16:05:00', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1896, '2021-03-15 16:05:04', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1897, '2021-03-15 16:05:10', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1898, '2021-03-15 16:07:25', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1899, '2021-03-15 16:07:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1900, '2021-03-15 16:07:38', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1901, '2021-03-15 16:10:22', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1902, '2021-03-15 16:16:40', '访问挂号页面', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$be4caf72.listByPage(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:152)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at com.educational.demo.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 141 more\r\nCaused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:39)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:270)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	... 146 more\r\nCaused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :\'     WHERE (patientName LIKE ?)\n   \', expect RPAREN, actual WHERE pos 542, line 7, column 66, token WHERE : SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:798)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	... 156 more\r\nCaused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :\'     WHERE (patientName LIKE ?)\n   \', expect RPAREN, actual WHERE pos 542, line 7, column 66, token WHERE\r\n	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:284)\r\n	at com.alibaba.druid.sql.parser.SQLParser.accept(SQLParser.java:292)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseTableSource(MySqlSelectParser.java:235)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseFrom(MySqlSelectParser.java:76)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:180)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.query(SQLSelectParser.java:207)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:113)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:149)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:83)\r\n	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:624)\r\n	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:578)\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:785)\r\n	... 164 more\r\n', 'ERROR', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 52, '123456', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1903, '2021-03-15 16:16:49', '访问挂号页面', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$be4caf72.listByPage(<generated>)\r\n	at sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:152)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at com.educational.demo.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 139 more\r\nCaused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:39)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:270)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	... 144 more\r\nCaused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :\'     WHERE (patientName LIKE ?)\n   \', expect RPAREN, actual WHERE pos 542, line 7, column 66, token WHERE : SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:798)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	... 154 more\r\nCaused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :\'     WHERE (patientName LIKE ?)\n   \', expect RPAREN, actual WHERE pos 542, line 7, column 66, token WHERE\r\n	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:284)\r\n	at com.alibaba.druid.sql.parser.SQLParser.accept(SQLParser.java:292)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseTableSource(MySqlSelectParser.java:235)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseFrom(MySqlSelectParser.java:76)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:180)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.query(SQLSelectParser.java:207)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:113)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:149)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:83)\r\n	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:624)\r\n	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:578)\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:785)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$be4caf72.listByPage(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	... 94 more\r\n', 'ERROR', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1904, '2021-03-15 16:17:09', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1905, '2021-03-15 16:19:46', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1906, '2021-03-15 16:50:47', '访问科室页面', NULL, 'INFO', 'com.educational.demo.controller.AdminDepartmentController.listAllDepartment()', '{ }', '0:0:0:0:0:0:0:1', 24, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1907, '2021-03-15 16:53:01', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 110, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1908, '2021-03-15 19:34:58', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 2913, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1909, '2021-03-15 19:35:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 21758, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1910, '2021-03-15 19:36:23', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 50527, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1911, '2021-03-15 19:36:30', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 3928, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1912, '2021-03-15 19:36:59', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 21115, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1913, '2021-03-15 19:41:19', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 3030, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1914, '2021-03-15 19:41:43', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 16665, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1915, '2021-03-15 19:42:31', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1916, '2021-03-15 19:42:36', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1917, '2021-03-15 19:44:23', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1918, '2021-03-15 19:44:27', '访问挂号页面', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$51f18757.listByPage(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:152)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at com.educational.demo.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 142 more\r\nCaused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL \n\r\n	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:39)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:270)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	... 148 more\r\nCaused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :\'     WHERE (patientName LIKE ?)\n   \', expect RPAREN, actual WHERE pos 542, line 7, column 66, token WHERE : SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        where re.rStatus =1 and  date(re.createTime) = curdate()\n         \n            WHERE (patientName LIKE ?)\n         \n        order by re.registrationId ) TOTAL\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:798)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	... 158 more\r\nCaused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :\'     WHERE (patientName LIKE ?)\n   \', expect RPAREN, actual WHERE pos 542, line 7, column 66, token WHERE\r\n	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:284)\r\n	at com.alibaba.druid.sql.parser.SQLParser.accept(SQLParser.java:292)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseTableSource(MySqlSelectParser.java:235)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseFrom(MySqlSelectParser.java:76)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:180)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.query(SQLSelectParser.java:207)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:113)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:149)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:83)\r\n	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:624)\r\n	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:578)\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:785)\r\n	... 166 more\r\n', 'ERROR', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 30, '123456', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1919, '2021-03-15 20:01:06', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 87, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1920, '2021-03-15 20:09:09', '访问挂号页面', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$5ba90dc9.listByPage(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:152)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at com.educational.demo.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 142 more\r\nCaused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:39)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:270)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	... 148 more\r\nCaused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :\'     on re.rStatus =1 and  date(re.\', expect RPAREN, actual ON pos 460, line 6, column 64, token ON : SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:798)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	... 158 more\r\nCaused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :\'     on re.rStatus =1 and  date(re.\', expect RPAREN, actual ON pos 460, line 6, column 64, token ON\r\n	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:284)\r\n	at com.alibaba.druid.sql.parser.SQLParser.accept(SQLParser.java:292)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseTableSource(MySqlSelectParser.java:235)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseFrom(MySqlSelectParser.java:76)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:180)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.query(SQLSelectParser.java:207)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:113)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:149)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:83)\r\n	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:624)\r\n	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:578)\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:785)\r\n	... 166 more\r\n', 'ERROR', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 54, '123456', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1921, '2021-03-15 20:09:55', '访问挂号页面', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$5ba90dc9.listByPage(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:152)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at com.educational.demo.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 142 more\r\nCaused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL \n\r\n	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:39)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:270)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	... 148 more\r\nCaused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :\'     on re.rStatus =1 and  date(re.\', expect RPAREN, actual ON pos 460, line 6, column 64, token ON : SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n        on re.rStatus =1 and  date(re.createTime) = curdate()\n         \n        order by re.registrationId ) TOTAL\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:798)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	... 158 more\r\nCaused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :\'     on re.rStatus =1 and  date(re.\', expect RPAREN, actual ON pos 460, line 6, column 64, token ON\r\n	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:284)\r\n	at com.alibaba.druid.sql.parser.SQLParser.accept(SQLParser.java:292)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseTableSource(MySqlSelectParser.java:235)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseFrom(MySqlSelectParser.java:76)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:180)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.query(SQLSelectParser.java:207)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:113)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:149)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:83)\r\n	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:624)\r\n	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:578)\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:785)\r\n	... 166 more\r\n', 'ERROR', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1922, '2021-03-15 20:10:46', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 95, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1923, '2021-03-15 20:11:07', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 135, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1924, '2021-03-15 20:11:10', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 25, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1925, '2021-03-15 20:20:57', '访问挂号页面', 'org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n       and\n         \n         \n\n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n       and\n         \n         \n\n        order by re.registrationId ) TOTAL \n\r\n	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)\r\n	at com.sun.proxy.$Proxy106.selectList(Unknown Source)\r\n	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForIPage(MybatisMapperMethod.java:134)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:96)\r\n	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)\r\n	at com.sun.proxy.$Proxy138.listTableByPage(Unknown Source)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)\r\n	at com.sun.proxy.$Proxy139.listTableByPage(Unknown Source)\r\n	at com.educational.demo.service.impl.RegistrationServiceImpl.listTableByPage(RegistrationServiceImpl.java:45)\r\n	at com.educational.demo.controller.AdminRegistrationController.listByPage(AdminRegistrationController.java:56)\r\n	at com.educational.demo.controller.AdminRegistrationController$$FastClassBySpringCGLIB$$5807a955.invoke(<generated>)\r\n	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)\r\n	at com.educational.demo.aspect.AccessLogAspect.logAround(AccessLogAspect.java:55)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)\r\n	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)\r\n	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)\r\n	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\n	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\n	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\n	at com.educational.demo.controller.AdminRegistrationController$$EnhancerBySpringCGLIB$$c06e3e12.listByPage(<generated>)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\r\n	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\r\n	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)\r\n	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)\r\n	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\r\n	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\r\n	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\r\n	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\r\n	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)\r\n	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\r\n	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\r\n	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:152)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at com.educational.demo.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\r\n	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\r\n	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\r\n	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\r\n	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\r\n	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\r\n	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\r\n	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\r\n	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)\r\n	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\r\n	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\r\n	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n	at java.lang.Thread.run(Thread.java:748)\r\nCaused by: org.apache.ibatis.exceptions.PersistenceException: \r\n### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n       and\n         \n         \n\n        order by re.registrationId ) TOTAL \n\r\n### The error may exist in file [F:\\Hospital\\educational\\target\\classes\\mapper\\RegistrationMapper.xml]\r\n### The error may involve com.educational.demo.dao.RegistrationMapper.listTableByPage\r\n### The error occurred while executing a query\r\n### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n       and\n         \n         \n\n        order by re.registrationId ) TOTAL \n\r\n	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n	at java.lang.reflect.Method.invoke(Method.java:498)\r\n	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)\r\n	... 142 more\r\nCaused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : \n SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n       and\n         \n         \n\n        order by re.registrationId ) TOTAL \n\r\n	at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:39)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:270)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.intercept(PaginationInterceptor.java:218)\r\n	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)\r\n	at com.sun.proxy.$Proxy180.prepare(Unknown Source)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.prepareStatement(MybatisSimpleExecutor.java:92)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:66)\r\n	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)\r\n	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:163)\r\n	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)\r\n	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)\r\n	... 148 more\r\nCaused by: java.sql.SQLException: sql injection violation, syntax error: syntax error, error in :\'rder by re.registrationId ) TOTAL\', expect RPAREN, actual BY pos 498, line 11, column 15, token BY : SELECT COUNT(1) FROM ( select re.registrationId, re.patientName, re.sex, re.age, re.price, re.createMan, re.rStatus, re.phone, re.idCard, re.rdescribe, re.createTime, re.updateTime,\n        dm.departmentName, dt.doctorName, rt.type\n        from registration re\n        left join department dm on re.departmentId = dm.departmentId\n        left join doctor dt on re.doctorId = dt.doctorId\n        left join registrationType rt on re.typeId = rt.typeId\n       and\n         \n         \n\n        order by re.registrationId ) TOTAL\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:798)\r\n	at com.alibaba.druid.wall.WallFilter.connection_prepareStatement(WallFilter.java:251)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.filter.FilterAdapter.connection_prepareStatement(FilterAdapter.java:929)\r\n	at com.alibaba.druid.filter.FilterEventAdapter.connection_prepareStatement(FilterEventAdapter.java:122)\r\n	at com.alibaba.druid.filter.FilterChainImpl.connection_prepareStatement(FilterChainImpl.java:568)\r\n	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.prepareStatement(ConnectionProxyImpl.java:342)\r\n	at com.alibaba.druid.pool.DruidPooledConnection.prepareStatement(DruidPooledConnection.java:349)\r\n	at com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor.queryTotal(PaginationInterceptor.java:255)\r\n	... 158 more\r\nCaused by: com.alibaba.druid.sql.parser.ParserException: syntax error, error in :\'rder by re.registrationId ) TOTAL\', expect RPAREN, actual BY pos 498, line 11, column 15, token BY\r\n	at com.alibaba.druid.sql.parser.SQLParser.printError(SQLParser.java:284)\r\n	at com.alibaba.druid.sql.parser.SQLParser.accept(SQLParser.java:292)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseTableSource(MySqlSelectParser.java:235)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.parseFrom(MySqlSelectParser.java:76)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlSelectParser.query(MySqlSelectParser.java:180)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.query(SQLSelectParser.java:207)\r\n	at com.alibaba.druid.sql.parser.SQLSelectParser.select(SQLSelectParser.java:59)\r\n	at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseSelect(MySqlStatementParser.java:113)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:149)\r\n	at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:83)\r\n	at com.alibaba.druid.wall.WallProvider.checkInternal(WallProvider.java:624)\r\n	at com.alibaba.druid.wall.WallProvider.check(WallProvider.java:578)\r\n	at com.alibaba.druid.wall.WallFilter.checkInternal(WallFilter.java:785)\r\n	... 166 more\r\n', 'ERROR', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 88, '123456', 'Chrome 8', '内网IP', 0);
INSERT INTO `sys_access_log` VALUES (1926, '2021-03-15 20:22:09', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 124, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1927, '2021-03-15 20:22:18', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1928, '2021-03-15 20:22:22', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 22, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1929, '2021-03-15 20:22:25', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=网, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1930, '2021-03-15 20:22:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 14, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1931, '2021-03-15 20:22:37', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=陈建锋, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1932, '2021-03-15 20:22:40', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 14, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1933, '2021-03-15 20:24:09', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 77, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1934, '2021-03-15 20:27:45', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 174, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1935, '2021-03-15 20:35:38', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 102, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1936, '2021-03-15 20:35:49', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 18, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1937, '2021-03-15 20:37:21', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1938, '2021-03-15 20:39:49', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 74, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1939, '2021-03-15 20:39:58', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 17, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1940, '2021-03-15 20:40:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 22, '100001', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1941, '2021-03-15 20:40:33', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=和, phone=, startDate=, endDate=null) }', '0:0:0:0:0:0:0:1', 19, '100001', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1942, '2021-03-15 21:25:53', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 136, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1943, '2021-03-15 21:30:32', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1944, '2021-03-15 21:34:13', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 66, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1945, '2021-03-15 21:34:15', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 49, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1946, '2021-03-15 21:34:22', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1947, '2021-03-15 21:41:19', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 3457, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1948, '2021-03-15 21:44:34', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 3724, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1949, '2021-03-15 21:47:24', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 16, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1950, '2021-03-15 21:47:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1951, '2021-03-15 21:47:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1952, '2021-03-15 21:47:53', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1953, '2021-03-15 22:14:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1954, '2021-03-15 22:16:19', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1955, '2021-03-15 22:17:16', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1956, '2021-03-15 22:17:44', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1957, '2021-03-15 22:20:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1958, '2021-03-15 22:20:35', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1959, '2021-03-15 22:41:03', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 4318, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1960, '2021-03-15 22:41:27', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10916, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1961, '2021-03-15 22:42:37', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1962, '2021-03-15 22:45:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1963, '2021-03-15 22:47:21', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1964, '2021-03-15 22:47:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1965, '2021-03-15 22:48:12', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1966, '2021-03-15 22:59:35', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1967, '2021-03-15 23:04:42', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1968, '2021-03-15 23:09:17', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1969, '2021-03-15 23:10:16', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1970, '2021-03-15 23:16:08', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1971, '2021-03-15 23:17:07', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 16, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1972, '2021-03-16 00:54:08', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 60, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1973, '2021-03-16 00:55:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1974, '2021-03-16 00:55:37', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1975, '2021-03-16 00:55:39', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1976, '2021-03-16 00:55:40', '访问挂号类型页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationTypeController.listAll()', '{ }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1977, '2021-03-16 00:56:10', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 26, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1978, '2021-03-16 00:56:12', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1979, '2021-03-16 00:56:21', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 22, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1980, '2021-03-16 00:57:08', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1981, '2021-03-16 00:59:24', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1982, '2021-03-16 01:00:34', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1983, '2021-03-16 01:03:23', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1984, '2021-03-16 01:03:35', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1985, '2021-03-16 01:27:21', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 125, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1986, '2021-03-16 01:30:30', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 68, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1987, '2021-03-16 01:33:48', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1988, '2021-03-16 01:35:00', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1989, '2021-03-16 01:36:17', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 128, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1990, '2021-03-16 01:36:55', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 17, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1991, '2021-03-16 01:39:10', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 85, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1992, '2021-03-16 01:39:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1993, '2021-03-16 01:42:11', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 88, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1994, '2021-03-16 01:42:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 14, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1995, '2021-03-16 01:42:59', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1996, '2021-03-16 01:45:16', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1997, '2021-03-16 01:45:17', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1998, '2021-03-16 01:45:18', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (1999, '2021-03-16 01:45:20', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2000, '2021-03-16 01:45:26', '访问项目页面', NULL, 'INFO', 'com.educational.demo.controller.AdminProjectController.listByPage()', '{ page: 1 limit: 15 projectQuery: ProjectQuery(projectName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 26, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2001, '2021-03-16 01:48:27', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2002, '2021-03-16 01:49:26', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2003, '2021-03-16 01:51:32', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2004, '2021-03-16 01:55:30', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2005, '2021-03-16 01:55:53', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2006, '2021-03-16 01:58:30', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 146, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2007, '2021-03-19 16:11:08', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 78, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2008, '2021-03-20 20:00:35', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 27, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2009, '2021-03-20 21:32:49', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 463, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2010, '2021-03-20 21:33:06', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2011, '2021-03-20 21:55:01', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 501, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2012, '2021-03-20 21:55:19', '访问标签页', NULL, 'INFO', 'com.educational.demo.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 21, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2013, '2021-03-20 21:55:40', '访问分类页面', NULL, 'INFO', 'com.educational.demo.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 15, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2014, '2021-03-20 21:55:58', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 74, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2015, '2021-03-20 21:56:02', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 20, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2016, '2021-03-20 22:07:39', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2017, '2021-03-20 22:09:19', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 22, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2018, '2021-03-20 22:10:00', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 527, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2019, '2021-03-20 22:11:38', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2020, '2021-03-20 22:13:29', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 28, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2021, '2021-03-20 22:13:34', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 27, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2022, '2021-03-20 22:19:30', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 482, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2023, '2021-03-20 22:19:40', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 20, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2024, '2021-03-20 22:19:57', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2025, '2021-03-20 22:21:04', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24389, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2026, '2021-03-20 22:36:03', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2027, '2021-03-20 22:38:52', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '192.168.56.1', 578, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2028, '2021-03-20 22:42:05', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2029, '2021-03-21 14:32:11', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 513, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2030, '2021-03-21 14:32:57', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2031, '2021-03-21 14:33:52', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 26, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2032, '2021-03-21 15:13:26', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 84, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2033, '2021-03-21 15:13:45', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 27, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2034, '2021-03-21 15:14:13', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 20, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2035, '2021-03-21 15:15:29', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 18, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2036, '2021-03-21 15:20:38', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 22, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2037, '2021-03-21 15:45:16', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2038, '2021-03-21 15:46:11', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2039, '2021-03-21 15:46:33', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 19, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2040, '2021-03-21 15:47:26', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 20, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2041, '2021-03-21 15:48:30', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2042, '2021-03-21 15:52:08', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2043, '2021-03-21 15:55:30', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2044, '2021-03-21 16:01:11', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 27, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2045, '2021-03-21 16:58:59', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2046, '2021-03-21 16:59:05', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 26, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2047, '2021-03-21 16:59:33', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2048, '2021-03-21 17:00:56', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 19, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2049, '2021-03-21 19:16:02', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2050, '2021-03-21 19:16:29', '访问标签页', NULL, 'INFO', 'com.educational.demo.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 34, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2051, '2021-03-21 19:17:08', '访问分类页面', NULL, 'INFO', 'com.educational.demo.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 28, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2052, '2021-03-21 19:17:19', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 38, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2053, '2021-03-21 19:17:25', '访问分类页面', NULL, 'INFO', 'com.educational.demo.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 3, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2054, '2021-03-21 19:17:29', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 56, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2055, '2021-03-21 19:33:24', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 54, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2056, '2021-03-21 19:33:42', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 63, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2057, '2021-03-21 19:34:06', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 22, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2058, '2021-03-21 19:45:05', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 51, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2059, '2021-03-21 19:52:49', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 71, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2060, '2021-03-21 19:52:55', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 26, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2061, '2021-03-21 19:53:02', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 51, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2062, '2021-03-21 20:06:00', '访问分类页面', NULL, 'INFO', 'com.educational.demo.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 6, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2063, '2021-03-21 20:06:05', '访问标签页', NULL, 'INFO', 'com.educational.demo.controller.front.TagsController.tags()', '{ }', '0:0:0:0:0:0:0:1', 6, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2064, '2021-03-21 20:06:24', '访问分类页面', NULL, 'INFO', 'com.educational.demo.controller.front.CategoriesController.categories()', '{ }', '0:0:0:0:0:0:0:1', 2, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2065, '2021-03-21 20:06:33', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 51, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2066, '2021-03-21 20:15:37', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 227, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2067, '2021-03-21 20:19:50', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 63, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2068, '2021-03-21 20:34:31', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 73, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2069, '2021-03-21 20:34:34', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 39, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2070, '2021-03-21 20:35:04', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 54, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2071, '2021-03-21 20:35:34', '访问归档页面', NULL, 'INFO', 'com.educational.demo.controller.front.ArchivesController.archives()', '{ dateFilterType: null }', '0:0:0:0:0:0:0:1', 541, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2072, '2021-03-21 20:35:36', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 70, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2073, '2021-03-21 20:37:56', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 34, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2074, '2021-03-21 20:37:57', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 38, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2075, '2021-03-21 20:37:59', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 23, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2076, '2021-03-21 20:39:23', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2077, '2021-03-21 20:39:25', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2078, '2021-03-21 20:40:03', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2079, '2021-03-21 20:40:07', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2080, '2021-03-21 20:58:56', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 34, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2081, '2021-03-21 20:59:01', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 20, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2082, '2021-03-21 20:59:13', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 23, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2083, '2021-03-21 23:11:49', '访问用户页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminUserController.listByPage()', '{ page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 70, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2084, '2021-03-21 23:11:56', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 18, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2085, '2021-03-22 01:05:48', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 88, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2086, '2021-03-22 01:05:56', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2087, '2021-03-22 01:05:58', '访问挂号类型页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationTypeController.listAll()', '{ }', '0:0:0:0:0:0:0:1', 49, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2088, '2021-03-22 01:06:38', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 32, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2089, '2021-03-22 01:06:42', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 12, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2090, '2021-03-22 01:06:44', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 33, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2091, '2021-03-22 01:07:13', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 44, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2092, '2021-03-22 01:10:14', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2093, '2021-03-22 01:10:26', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2094, '2021-03-22 01:11:23', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2095, '2021-03-22 01:11:42', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2096, '2021-03-22 01:11:43', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2097, '2021-03-22 01:17:16', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 91, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2098, '2021-03-22 01:17:35', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2099, '2021-03-22 01:17:48', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 56, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2100, '2021-03-22 01:18:05', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2101, '2021-03-22 01:21:35', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2102, '2021-03-22 01:21:40', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2103, '2021-03-22 01:21:42', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2104, '2021-03-22 01:43:09', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2105, '2021-03-22 01:43:13', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2106, '2021-03-22 01:43:31', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2107, '2021-03-22 01:43:34', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2108, '2021-03-22 01:43:35', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2109, '2021-03-22 01:44:06', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2110, '2021-03-22 01:44:14', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2111, '2021-03-22 01:44:26', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2112, '2021-03-22 01:49:11', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2113, '2021-03-22 01:49:23', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2114, '2021-03-22 01:49:25', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2115, '2021-03-22 01:49:26', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 5, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2116, '2021-03-22 01:49:33', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2117, '2021-03-22 01:49:38', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2118, '2021-03-22 01:49:38', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2119, '2021-03-22 01:55:14', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2120, '2021-03-22 01:55:28', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 26, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2121, '2021-03-22 01:55:29', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 15, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2122, '2021-03-22 01:55:31', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2123, '2021-03-22 01:55:37', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2124, '2021-03-22 01:55:45', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2125, '2021-03-22 01:55:45', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2126, '2021-03-22 01:55:45', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2127, '2021-03-22 01:56:09', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2128, '2021-03-22 01:56:11', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2129, '2021-03-22 01:56:14', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2130, '2021-03-22 01:56:18', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2131, '2021-03-22 01:56:23', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2132, '2021-03-22 01:56:23', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2133, '2021-03-22 02:01:32', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2134, '2021-03-22 02:01:44', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2135, '2021-03-22 02:01:46', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2136, '2021-03-22 02:01:48', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2137, '2021-03-22 02:01:52', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 7, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2138, '2021-03-22 02:01:56', '访问药品页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminDrugController.listByPage()', '{ page: 1 limit: 15 drugQuery: DrugQuery(drugName=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2139, '2021-03-22 02:02:14', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2140, '2021-03-22 02:02:16', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2141, '2021-03-22 02:06:31', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 9, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2142, '2021-03-22 02:07:13', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2143, '2021-03-22 02:07:43', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 10, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2144, '2021-03-22 02:07:54', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 8, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2145, '2021-03-22 02:10:22', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2146, '2021-03-22 02:32:05', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 51, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2147, '2021-03-22 02:32:07', '访问挂号类型页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationTypeController.listAll()', '{ }', '0:0:0:0:0:0:0:1', 13, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2148, '2021-03-22 02:32:33', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 29, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2149, '2021-03-22 02:32:46', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2150, '2021-03-22 12:35:46', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 291, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2151, '2021-03-22 13:26:15', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 49, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2152, '2021-03-22 13:42:37', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 17, '100001', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2153, '2021-03-22 13:42:46', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 11, '100001', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2154, '2021-03-22 15:23:25', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 87, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2155, '2021-03-22 15:30:02', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 29, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2156, '2021-03-22 15:30:05', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 6, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2157, '2021-03-22 15:55:40', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 136, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2158, '2021-03-22 15:56:56', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 21, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2159, '2021-03-22 16:01:08', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 26, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2160, '2021-03-22 16:12:46', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 482, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2161, '2021-03-22 16:15:33', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 506, '', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2162, '2021-03-22 16:28:29', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 33, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2163, '2021-03-22 16:32:09', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 26, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2164, '2021-03-22 16:32:41', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 22, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2165, '2021-03-22 16:33:14', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 24, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2166, '2021-03-22 16:39:17', '访问首页', NULL, 'INFO', 'com.educational.demo.controller.front.HomeController.home()', '{ }', '0:0:0:0:0:0:0:1', 25, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2167, '2021-03-22 16:45:10', '访问角色页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRoleController.listByPage()', '{ page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 14, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2168, '2021-03-22 16:45:11', '访问用户页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminUserController.listByPage()', '{ page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 14, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2169, '2021-03-22 17:04:57', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 134, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2170, '2021-03-22 17:05:18', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 18, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2171, '2021-03-22 17:05:20', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 2, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2172, '2021-03-22 17:05:22', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 2, '123456', 'Chrome 8', '内网IP', 1);
INSERT INTO `sys_access_log` VALUES (2173, '2021-03-22 17:05:36', '访问挂号页面', NULL, 'INFO', 'com.educational.demo.controller.admin.AdminRegistrationController.listByPage()', '{ page: 1 limit: 15 registrationQuery: RegistrationQuery(patientName=null, phone=null, startDate=null, endDate=null) }', '0:0:0:0:0:0:0:1', 4, '123456', 'Chrome 8', '内网IP', 1);

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `href` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '链接',
  `pid` bigint(20) NOT NULL COMMENT '父级菜单ID',
  `icon` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '图标',
  `authority` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限标识符',
  `sort` smallint(4) NULL DEFAULT NULL COMMENT '排序值',
  `type` tinyint(2) NULL DEFAULT NULL COMMENT '类型[1:目录, 2:菜单, 3:按钮]',
  `status` bit(1) NULL DEFAULT NULL COMMENT '是否显示',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  `target` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '页面跳转方式',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `idx_menu_title`(`title`) USING BTREE,
  INDEX `idx_menu_pid`(`pid`) USING BTREE,
  INDEX `idx_menu_sort`(`sort`) USING BTREE,
  INDEX `idx_menu_href`(`href`) USING BTREE,
  INDEX `idx_menu_authority`(`authority`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 93 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES (1, '后台系统管理', NULL, 0, 'fa fa-dashboard', NULL, 1, 1, b'1', NULL, '_self', '2021-01-10 15:22:36', '2021-01-10 15:22:39');
INSERT INTO `sys_menu` VALUES (2, '用户管理', '/admin/page/user/user-list', 82, 'fa fa-users', NULL, 1, 2, b'1', NULL, NULL, '2021-01-10 17:11:30', '2021-01-10 17:11:34');
INSERT INTO `sys_menu` VALUES (3, '查询用户', NULL, 2, NULL, 'sys:user:query', 100, 3, b'0', NULL, NULL, '2021-01-10 17:14:40', '2021-01-10 17:14:45');
INSERT INTO `sys_menu` VALUES (4, '添加用户', NULL, 2, NULL, 'sys:user:add', 100, 3, b'0', NULL, NULL, '2021-01-10 17:17:13', '2021-01-10 17:17:16');
INSERT INTO `sys_menu` VALUES (5, '修改用户', '', 2, '', 'sys:user:edit', 100, 3, b'0', '', '', '2021-01-10 17:18:07', '2021-01-10 17:18:11');
INSERT INTO `sys_menu` VALUES (6, '删除用户', NULL, 2, NULL, 'sys:user:delete', 100, 3, b'0', NULL, NULL, '2021-01-10 17:19:39', '2021-01-10 17:19:42');
INSERT INTO `sys_menu` VALUES (7, '角色管理', '/admin/page/role/role-list', 82, 'fa fa-user-circle', NULL, 2, 2, b'1', NULL, NULL, '2021-01-10 17:23:29', '2021-01-10 17:23:31');
INSERT INTO `sys_menu` VALUES (8, '查询角色', NULL, 7, NULL, 'sys:role:query', 100, 3, b'0', NULL, NULL, '2021-01-10 17:29:47', '2021-01-10 17:29:50');
INSERT INTO `sys_menu` VALUES (9, '添加角色', NULL, 7, NULL, 'sys:role:add', 100, 3, b'0', NULL, NULL, '2021-01-10 17:30:35', '2021-01-10 17:30:39');
INSERT INTO `sys_menu` VALUES (10, '修改角色', NULL, 7, NULL, 'sys:role:edit', 100, 3, b'0', NULL, NULL, '2021-01-10 17:35:53', '2021-01-10 17:35:55');
INSERT INTO `sys_menu` VALUES (11, '删除角色', NULL, 7, NULL, 'sys:role:delete', 100, 3, b'0', NULL, NULL, '2021-01-10 17:36:22', '2021-01-10 17:36:24');
INSERT INTO `sys_menu` VALUES (12, '菜单管理', '/admin/page/menu/menu-list', 82, 'fa fa-list', '', 3, 2, b'1', NULL, NULL, '2021-01-10 17:38:59', '2021-01-10 17:39:02');
INSERT INTO `sys_menu` VALUES (13, '查询菜单', NULL, 12, NULL, 'sys:menu:query', 100, 3, b'0', NULL, NULL, '2021-01-10 17:47:02', '2021-01-10 17:47:05');
INSERT INTO `sys_menu` VALUES (14, '添加菜单', NULL, 12, NULL, 'sys:menu:add', 100, 3, b'0', NULL, NULL, '2021-01-10 19:43:42', '2021-01-10 19:43:44');
INSERT INTO `sys_menu` VALUES (15, '修改菜单', NULL, 12, NULL, 'sys:menu:edit', 100, 3, b'0', NULL, NULL, '2021-01-10 21:40:22', '2021-01-10 21:40:24');
INSERT INTO `sys_menu` VALUES (16, '删除菜单', NULL, 12, NULL, 'sys:menu:delete', 100, 3, b'0', NULL, NULL, '2021-01-10 21:41:25', '2021-01-10 21:41:28');
INSERT INTO `sys_menu` VALUES (17, '访问日志', '/admin/page/accesslog/accesslog-list', 82, 'fa fa-eye', NULL, 4, 2, b'1', NULL, NULL, '2021-01-10 21:43:22', '2021-01-10 21:43:27');
INSERT INTO `sys_menu` VALUES (18, '查询访问日志', NULL, 17, NULL, 'sys:accesslog:query', 100, 3, b'0', NULL, NULL, '2021-01-10 21:44:35', '2021-01-10 21:44:37');
INSERT INTO `sys_menu` VALUES (19, '删除日志', NULL, 17, NULL, 'sys:accesslog:delete', 100, 3, b'0', NULL, NULL, '2021-01-10 21:47:01', '2021-01-10 21:47:03');
INSERT INTO `sys_menu` VALUES (20, '操作日志', '/admin/page/operation/operation-list', 82, 'fa fa-gear', NULL, 5, 2, b'1', NULL, NULL, '2021-01-10 21:48:01', '2021-01-10 21:48:04');
INSERT INTO `sys_menu` VALUES (21, '查询操作日志', '', 20, NULL, 'sys:operationlog:query', 100, 3, b'0', NULL, NULL, '2021-01-10 21:48:52', '2021-03-10 21:33:14');
INSERT INTO `sys_menu` VALUES (22, '删除操作日志', NULL, 20, NULL, 'sys:operationlog:delete', 100, 3, b'0', NULL, NULL, '2021-01-10 21:49:36', '2021-01-10 21:49:38');
INSERT INTO `sys_menu` VALUES (23, '门诊管理', '', 1, 'fa fa-ambulance', 'sys:sys', 2, 2, b'1', NULL, NULL, '2021-03-01 21:29:26', '2021-03-10 21:31:51');
INSERT INTO `sys_menu` VALUES (24, '用户挂号', '/admin/page/outpatient/registration-list', 23, 'fa fa-user', '', 1, 2, b'1', NULL, NULL, '2021-03-01 21:36:25', '2021-03-01 21:36:28');
INSERT INTO `sys_menu` VALUES (25, '查询挂号', NULL, 24, NULL, 'sys:registration:query', 100, 3, b'0', NULL, NULL, '2021-03-01 21:53:34', '2021-03-01 21:53:37');
INSERT INTO `sys_menu` VALUES (26, '添加挂号', NULL, 24, NULL, 'sys:registration:add', 100, 3, b'0', NULL, NULL, '2021-03-01 21:54:15', '2021-03-01 21:54:17');
INSERT INTO `sys_menu` VALUES (27, '修改挂号', NULL, 24, NULL, 'sys:registration:edit', 100, 3, b'0', NULL, NULL, '2021-03-01 21:55:30', '2021-03-01 21:55:32');
INSERT INTO `sys_menu` VALUES (28, '删除挂号', NULL, 24, NULL, 'sys:registration:delete', 100, 3, b'0', NULL, NULL, '2021-03-01 21:56:37', '2021-03-01 21:56:40');
INSERT INTO `sys_menu` VALUES (29, '转院', NULL, 24, NULL, 'sys:registration:transfer', 100, 3, b'0', NULL, NULL, '2021-03-01 21:57:46', '2021-03-01 21:57:49');
INSERT INTO `sys_menu` VALUES (30, '信息管理', NULL, 1, 'fa fa-list-alt', 'sys:sys', 3, 2, b'1', NULL, NULL, '2021-03-04 11:17:40', '2021-03-04 11:17:42');
INSERT INTO `sys_menu` VALUES (31, '医生管理', '/admin/page/doctor/doctor-list', 30, 'fa fa-user-md', NULL, 1, 2, b'1', NULL, NULL, '2021-03-04 15:16:59', '2021-03-04 15:17:01');
INSERT INTO `sys_menu` VALUES (32, '查询医生', NULL, 31, NULL, 'sys:doctor:query', 100, 3, b'0', NULL, NULL, '2021-03-04 15:25:58', '2021-03-04 15:26:00');
INSERT INTO `sys_menu` VALUES (33, '添加医生', NULL, 31, NULL, 'sys:doctor:add', 100, 3, b'0', NULL, NULL, '2021-03-04 15:37:02', '2021-03-04 15:37:03');
INSERT INTO `sys_menu` VALUES (34, '修改医生', NULL, 31, NULL, 'sys:doctor:edit', 100, 3, b'0', NULL, NULL, '2021-03-04 15:37:56', '2021-03-04 15:37:58');
INSERT INTO `sys_menu` VALUES (35, '删除医生', NULL, 31, NULL, 'sys:doctor:delete', 100, 3, b'0', NULL, NULL, '2021-03-04 15:40:09', '2021-03-04 15:40:12');
INSERT INTO `sys_menu` VALUES (36, '科室管理', '/admin/page/department/department-list', 30, 'fa fa-building', NULL, 2, 2, b'1', NULL, NULL, '2021-03-04 15:44:11', '2021-03-04 15:44:13');
INSERT INTO `sys_menu` VALUES (37, '查询科室', NULL, 36, NULL, 'sys:department:query', 100, 3, b'0', NULL, NULL, '2021-03-04 15:55:41', '2021-03-04 15:55:43');
INSERT INTO `sys_menu` VALUES (38, '添加科室', NULL, 36, NULL, 'sys:department:add', 100, 3, b'0', NULL, NULL, '2021-03-04 16:00:07', '2021-03-04 16:00:10');
INSERT INTO `sys_menu` VALUES (39, '修改科室', NULL, 36, NULL, 'sys:department:edit', 100, 3, b'0', NULL, NULL, '2021-03-04 16:01:46', '2021-03-04 16:01:47');
INSERT INTO `sys_menu` VALUES (40, '删除科室', NULL, 36, NULL, 'sys:department:delete', 100, 3, b'0', NULL, NULL, '2021-03-04 16:02:17', '2021-03-04 16:02:19');
INSERT INTO `sys_menu` VALUES (41, '挂号类型管理', '/admin/page/registrationType/registrationType-list', 30, 'fa fa-ravelry', '', 3, 2, b'1', NULL, NULL, '2021-03-04 16:09:43', '2021-03-10 21:34:10');
INSERT INTO `sys_menu` VALUES (42, '查询类型', NULL, 41, NULL, 'sys:registrationType:query', 100, 3, b'0', NULL, NULL, '2021-03-04 16:11:20', '2021-03-04 16:11:24');
INSERT INTO `sys_menu` VALUES (43, '添加类型', NULL, 41, NULL, 'sys:registrationType:add', 100, 3, b'0', NULL, NULL, '2021-03-04 16:12:58', '2021-03-04 16:13:00');
INSERT INTO `sys_menu` VALUES (44, '修改类型', NULL, 41, NULL, 'sys:registrationType:edit', 100, 3, b'0', NULL, NULL, '2021-03-04 16:13:37', '2021-03-04 16:13:39');
INSERT INTO `sys_menu` VALUES (45, '删除类型', NULL, 41, NULL, 'sys:registrationType:delete', 100, 3, b'0', NULL, NULL, '2021-03-04 16:14:12', '2021-03-04 16:14:14');
INSERT INTO `sys_menu` VALUES (46, '药品管理', '/admin/page/drug/drug-list', 30, 'fa fa-eyedropper', NULL, 4, 2, b'1', NULL, NULL, '2021-03-04 18:10:20', '2021-03-04 18:10:22');
INSERT INTO `sys_menu` VALUES (47, '查询药品', NULL, 46, NULL, 'sys:drug:query', 100, 3, b'0', NULL, NULL, '2021-03-04 18:35:30', '2021-03-04 18:35:33');
INSERT INTO `sys_menu` VALUES (48, '添加药品', NULL, 46, NULL, 'sys:drug:add', 100, 3, b'0', NULL, NULL, '2021-03-04 18:37:01', '2021-03-04 18:37:03');
INSERT INTO `sys_menu` VALUES (49, '修改药品', NULL, 46, NULL, 'sys:drug:edit', 100, 3, b'0', NULL, NULL, '2021-03-04 18:38:13', '2021-03-04 18:38:15');
INSERT INTO `sys_menu` VALUES (50, '删除药品', NULL, 46, NULL, 'sys:drug:delete', 100, 3, b'0', NULL, NULL, '2021-03-04 19:03:55', '2021-03-04 19:04:00');
INSERT INTO `sys_menu` VALUES (51, '项目管理', '/admin/page/project/project-list', 30, 'fa fa-flask', '', 5, 2, b'1', NULL, NULL, '2021-03-04 19:13:55', '2021-03-04 19:13:57');
INSERT INTO `sys_menu` VALUES (52, '查询项目', NULL, 51, NULL, 'sys:project:query', 100, 3, b'0', NULL, NULL, '2021-03-04 19:14:55', '2021-03-04 19:14:56');
INSERT INTO `sys_menu` VALUES (53, '添加项目', NULL, 51, NULL, 'sys:project:add', 100, 3, b'0', NULL, NULL, '2021-03-04 19:21:50', '2021-03-04 19:21:52');
INSERT INTO `sys_menu` VALUES (54, '修改项目', NULL, 51, NULL, 'sys:project:edit', 100, 3, b'0', NULL, NULL, '2021-03-04 19:22:30', '2021-03-04 19:22:33');
INSERT INTO `sys_menu` VALUES (55, '删除项目', NULL, 51, NULL, 'sys:project:delete', 100, 3, b'0', NULL, NULL, '2021-03-04 19:23:25', '2021-03-04 19:23:26');
INSERT INTO `sys_menu` VALUES (56, '统计管理', NULL, 1, 'fa fa-certificate', 'sys:sys', 4, 2, b'1', NULL, NULL, '2021-03-04 19:49:40', '2021-03-04 19:49:43');
INSERT INTO `sys_menu` VALUES (57, '单位管理', '/admin/page/units/units-list', 30, 'fa fa-flask', 'sys:sys', 6, 2, b'1', NULL, NULL, '2021-03-05 14:51:03', '2021-03-05 14:51:05');
INSERT INTO `sys_menu` VALUES (58, '查询单位', NULL, 57, NULL, 'sys:units:query', 100, 3, b'0', NULL, NULL, '2021-03-05 14:56:40', '2021-03-05 14:56:42');
INSERT INTO `sys_menu` VALUES (59, '添加单位', NULL, 57, NULL, 'sys:units:add', 100, 3, b'0', NULL, NULL, '2021-03-05 15:15:38', '2021-03-05 15:15:40');
INSERT INTO `sys_menu` VALUES (60, '修改单位', NULL, 57, NULL, 'sys:units:edit', 100, 3, b'0', NULL, NULL, '2021-03-05 15:20:48', '2021-03-05 15:20:51');
INSERT INTO `sys_menu` VALUES (61, '删除单位', NULL, 75, NULL, 'sys:units:delete', 100, 3, b'0', NULL, NULL, '2021-03-05 15:21:27', '2021-03-05 15:21:28');
INSERT INTO `sys_menu` VALUES (62, '问诊', '/admin/page/interrogation/interrogation-list', 23, 'fa fa-handshake-o', 'sys:registration:query', 2, 2, b'1', NULL, NULL, '2021-03-14 15:18:39', '2021-03-14 15:18:41');
INSERT INTO `sys_menu` VALUES (63, '药品划价', NULL, 62, NULL, 'sys:drug:query', 100, 3, b'0', NULL, NULL, '2021-03-14 20:31:36', '2021-03-14 20:31:38');
INSERT INTO `sys_menu` VALUES (64, '项目划价', NULL, 62, NULL, 'sys:project:query', 100, 3, b'0', NULL, NULL, '2021-03-15 00:24:52', '2021-03-15 00:24:54');
INSERT INTO `sys_menu` VALUES (65, '接口文档', '/swagger-ui.html', 82, 'fa fa-file-pdf-o', 'sys:swagger', 6, 2, b'1', NULL, NULL, '2020-05-23 17:24:12', '2020-05-31 17:07:22');
INSERT INTO `sys_menu` VALUES (66, '数据源监控', '/druid', 82, 'fa fa-database', 'sys:druid', 7, 2, b'1', NULL, NULL, '2020-05-11 15:31:45', '2020-05-31 17:03:51');
INSERT INTO `sys_menu` VALUES (67, '收费', '/admin/page/interrogation/money-list', 23, 'fa fa-rmb', 'sys:money:query', 3, 2, b'1', NULL, NULL, '2021-03-15 14:17:10', '2021-03-15 14:17:12');
INSERT INTO `sys_menu` VALUES (68, '前台管理', NULL, 0, 'a fa-book', '', 8, 1, b'1', NULL, NULL, '2021-03-16 18:09:26', '2021-03-16 18:09:28');
INSERT INTO `sys_menu` VALUES (69, '图片管理', '/admin/page/photo/photo-list', 68, 'fa fa-photo', '', 1, 2, b'1', NULL, NULL, '2021-03-16 18:13:49', '2021-03-16 18:13:51');
INSERT INTO `sys_menu` VALUES (70, '查询图片', NULL, 69, NULL, 'blog:photo:query', 100, 3, b'0', NULL, NULL, '2021-03-16 19:27:12', '2021-03-16 19:27:14');
INSERT INTO `sys_menu` VALUES (71, '添加图片', NULL, 69, NULL, 'blog:photo:add', 100, 3, b'0', NULL, NULL, '2021-03-16 19:29:16', '2021-03-16 19:29:18');
INSERT INTO `sys_menu` VALUES (72, '修改图片', NULL, 69, NULL, 'blog:photo:edit', 100, 3, b'0', NULL, NULL, '2021-03-16 20:17:35', '2021-03-16 20:17:36');
INSERT INTO `sys_menu` VALUES (73, '删除图片', NULL, 69, NULL, 'blog:photo:delete', 100, 3, b'0', NULL, NULL, '2021-03-16 20:18:16', '2021-03-16 20:18:18');
INSERT INTO `sys_menu` VALUES (74, '文章发布', '/admin/page/article/article-add', 68, 'fa fa-pencil-square-o', 'blog:article:add', 2, 2, b'1', NULL, NULL, '2021-03-19 14:31:20', '2021-03-19 14:31:22');
INSERT INTO `sys_menu` VALUES (75, '文章管理', '/admin/page/article/article-list', 68, 'fa fa-file-text', 'blog:article:query', 3, 2, b'1', NULL, NULL, '2021-03-19 14:34:10', '2021-03-19 14:34:12');
INSERT INTO `sys_menu` VALUES (76, '编辑文章', NULL, 68, NULL, 'blog:article:edit', 100, 3, b'0', NULL, NULL, '2021-03-19 16:22:09', '2021-03-19 16:22:11');
INSERT INTO `sys_menu` VALUES (78, '删除文章', NULL, 68, NULL, 'blog:article:delete', 100, 3, b'0', NULL, NULL, '2021-03-19 16:25:30', '2021-03-19 16:25:32');
INSERT INTO `sys_menu` VALUES (79, '文章审核', NULL, 68, NULL, 'blog:article:audit', 100, 3, b'0', NULL, NULL, '2021-03-19 16:27:45', '2021-03-19 16:27:46');
INSERT INTO `sys_menu` VALUES (82, '系统管理', NULL, 1, 'fa fa-gears', 'sys:sys', 1, 2, b'1', NULL, NULL, '2021-02-26 15:45:15', '2021-02-26 15:45:18');
INSERT INTO `sys_menu` VALUES (83, '分类管理', '/admin/page/category/category-list', 68, 'fa fa-bookmark', '', 4, 2, b'1', NULL, NULL, '2021-03-20 15:42:53', '2021-03-20 15:42:55');
INSERT INTO `sys_menu` VALUES (84, '查询分类', NULL, 83, NULL, 'blog:category:query', 100, 3, b'0', NULL, NULL, '2021-03-20 15:49:09', '2021-03-20 15:49:13');
INSERT INTO `sys_menu` VALUES (85, '添加分类', NULL, 83, NULL, 'blog:category:add', 100, 3, b'0', NULL, NULL, '2021-03-20 15:50:04', '2021-03-20 15:50:06');
INSERT INTO `sys_menu` VALUES (86, '修改分类', NULL, 83, NULL, 'blog:category:edit', 100, 3, b'0', NULL, NULL, '2021-03-20 15:50:54', '2021-03-20 15:50:56');
INSERT INTO `sys_menu` VALUES (87, '删除分类', NULL, 83, NULL, 'blog:category:delete', 100, 3, b'0', NULL, NULL, '2021-03-20 15:51:32', '2021-03-20 15:51:33');
INSERT INTO `sys_menu` VALUES (88, '标签管理', '/admin/page/tag/tag-list', 68, 'fa fa-tags', NULL, 4, 2, b'1', NULL, NULL, '2021-03-20 15:55:01', '2021-03-20 15:55:02');
INSERT INTO `sys_menu` VALUES (89, '查询标签', NULL, 88, NULL, 'blog:tag:query', 100, 3, b'0', NULL, NULL, '2021-03-20 15:56:47', '2021-03-20 15:56:48');
INSERT INTO `sys_menu` VALUES (90, '添加标签', NULL, 88, NULL, 'blog:tag:add', 100, 3, b'0', NULL, NULL, '2021-03-20 15:58:19', '2021-03-20 15:58:21');
INSERT INTO `sys_menu` VALUES (91, '修改标签', NULL, 88, NULL, 'blog:tag:edit', 100, 3, b'0', NULL, NULL, '2021-03-20 15:58:56', '2021-03-20 15:58:58');
INSERT INTO `sys_menu` VALUES (92, '删除标签', NULL, 88, NULL, 'blog:tag:delete', 100, 3, b'0', NULL, NULL, '2021-03-20 15:59:27', '2021-03-20 15:59:28');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `roleName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '名称',
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `rank1` smallint(4) NULL DEFAULT NULL COMMENT '级别',
  `color` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '颜色',
  `status` tinyint(2) NULL DEFAULT NULL COMMENT '启用状态[0:停用, 1:启用]',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `idx_role_roleName`(`roleName`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES (1, '管理员', 'admin', 1, 'red', 1, '2020-06-14 18:24:48', '2020-06-14 19:13:37');
INSERT INTO `sys_role` VALUES (2, '医生', 'docter', 2, 'orange', 1, '2020-06-14 19:10:18', '2020-06-15 20:12:24');
INSERT INTO `sys_role` VALUES (3, '仓库管理', 'stotemanager', 3, 'green', 1, '2020-06-14 19:16:25', '2020-06-15 20:11:45');
INSERT INTO `sys_role` VALUES (4, '药房管理', 'drugmanager', 4, 'blue', 1, '2021-01-09 18:56:00', '2021-01-09 18:56:04');
INSERT INTO `sys_role` VALUES (5, '收费员', '负责药品跟项目收费', 1, 'black', 1, '2021-03-07 21:28:40', '2021-03-10 16:27:27');

-- ----------------------------
-- Table structure for sys_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `roleId` bigint(20) NOT NULL COMMENT '角色ID',
  `menuId` bigint(20) NOT NULL COMMENT '菜单ID',
  PRIMARY KEY (`roleId`, `menuId`) USING BTREE,
  INDEX `fk_menu_id`(`menuId`) USING BTREE,
  CONSTRAINT `sys_role_menu_ibfk_1` FOREIGN KEY (`menuId`) REFERENCES `sys_menu` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `sys_role_menu_ibfk_2` FOREIGN KEY (`roleId`) REFERENCES `sys_role` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_role_menu
-- ----------------------------
INSERT INTO `sys_role_menu` VALUES (1, 1);
INSERT INTO `sys_role_menu` VALUES (2, 1);
INSERT INTO `sys_role_menu` VALUES (5, 1);
INSERT INTO `sys_role_menu` VALUES (1, 2);
INSERT INTO `sys_role_menu` VALUES (1, 3);
INSERT INTO `sys_role_menu` VALUES (1, 4);
INSERT INTO `sys_role_menu` VALUES (1, 5);
INSERT INTO `sys_role_menu` VALUES (1, 6);
INSERT INTO `sys_role_menu` VALUES (1, 7);
INSERT INTO `sys_role_menu` VALUES (1, 8);
INSERT INTO `sys_role_menu` VALUES (1, 9);
INSERT INTO `sys_role_menu` VALUES (1, 10);
INSERT INTO `sys_role_menu` VALUES (1, 11);
INSERT INTO `sys_role_menu` VALUES (1, 12);
INSERT INTO `sys_role_menu` VALUES (1, 13);
INSERT INTO `sys_role_menu` VALUES (1, 14);
INSERT INTO `sys_role_menu` VALUES (1, 15);
INSERT INTO `sys_role_menu` VALUES (1, 16);
INSERT INTO `sys_role_menu` VALUES (1, 17);
INSERT INTO `sys_role_menu` VALUES (1, 18);
INSERT INTO `sys_role_menu` VALUES (1, 19);
INSERT INTO `sys_role_menu` VALUES (1, 20);
INSERT INTO `sys_role_menu` VALUES (1, 21);
INSERT INTO `sys_role_menu` VALUES (1, 22);
INSERT INTO `sys_role_menu` VALUES (1, 23);
INSERT INTO `sys_role_menu` VALUES (2, 23);
INSERT INTO `sys_role_menu` VALUES (1, 24);
INSERT INTO `sys_role_menu` VALUES (1, 25);
INSERT INTO `sys_role_menu` VALUES (1, 26);
INSERT INTO `sys_role_menu` VALUES (1, 27);
INSERT INTO `sys_role_menu` VALUES (1, 28);
INSERT INTO `sys_role_menu` VALUES (1, 29);
INSERT INTO `sys_role_menu` VALUES (1, 30);
INSERT INTO `sys_role_menu` VALUES (1, 31);
INSERT INTO `sys_role_menu` VALUES (1, 32);
INSERT INTO `sys_role_menu` VALUES (1, 33);
INSERT INTO `sys_role_menu` VALUES (1, 34);
INSERT INTO `sys_role_menu` VALUES (1, 35);
INSERT INTO `sys_role_menu` VALUES (1, 36);
INSERT INTO `sys_role_menu` VALUES (1, 37);
INSERT INTO `sys_role_menu` VALUES (1, 38);
INSERT INTO `sys_role_menu` VALUES (1, 39);
INSERT INTO `sys_role_menu` VALUES (1, 40);
INSERT INTO `sys_role_menu` VALUES (1, 41);
INSERT INTO `sys_role_menu` VALUES (1, 42);
INSERT INTO `sys_role_menu` VALUES (1, 43);
INSERT INTO `sys_role_menu` VALUES (1, 44);
INSERT INTO `sys_role_menu` VALUES (1, 45);
INSERT INTO `sys_role_menu` VALUES (1, 46);
INSERT INTO `sys_role_menu` VALUES (1, 47);
INSERT INTO `sys_role_menu` VALUES (1, 48);
INSERT INTO `sys_role_menu` VALUES (1, 49);
INSERT INTO `sys_role_menu` VALUES (1, 50);
INSERT INTO `sys_role_menu` VALUES (1, 51);
INSERT INTO `sys_role_menu` VALUES (1, 52);
INSERT INTO `sys_role_menu` VALUES (1, 53);
INSERT INTO `sys_role_menu` VALUES (1, 54);
INSERT INTO `sys_role_menu` VALUES (1, 55);
INSERT INTO `sys_role_menu` VALUES (1, 56);
INSERT INTO `sys_role_menu` VALUES (1, 57);
INSERT INTO `sys_role_menu` VALUES (1, 58);
INSERT INTO `sys_role_menu` VALUES (1, 59);
INSERT INTO `sys_role_menu` VALUES (1, 60);
INSERT INTO `sys_role_menu` VALUES (1, 61);
INSERT INTO `sys_role_menu` VALUES (1, 62);
INSERT INTO `sys_role_menu` VALUES (2, 62);
INSERT INTO `sys_role_menu` VALUES (1, 63);
INSERT INTO `sys_role_menu` VALUES (2, 63);
INSERT INTO `sys_role_menu` VALUES (1, 64);
INSERT INTO `sys_role_menu` VALUES (2, 64);
INSERT INTO `sys_role_menu` VALUES (1, 65);
INSERT INTO `sys_role_menu` VALUES (1, 66);
INSERT INTO `sys_role_menu` VALUES (1, 67);
INSERT INTO `sys_role_menu` VALUES (1, 68);
INSERT INTO `sys_role_menu` VALUES (1, 69);
INSERT INTO `sys_role_menu` VALUES (1, 70);
INSERT INTO `sys_role_menu` VALUES (1, 71);
INSERT INTO `sys_role_menu` VALUES (1, 72);
INSERT INTO `sys_role_menu` VALUES (1, 73);
INSERT INTO `sys_role_menu` VALUES (1, 74);
INSERT INTO `sys_role_menu` VALUES (1, 75);
INSERT INTO `sys_role_menu` VALUES (1, 76);
INSERT INTO `sys_role_menu` VALUES (1, 78);
INSERT INTO `sys_role_menu` VALUES (1, 79);
INSERT INTO `sys_role_menu` VALUES (1, 82);
INSERT INTO `sys_role_menu` VALUES (1, 83);
INSERT INTO `sys_role_menu` VALUES (1, 84);
INSERT INTO `sys_role_menu` VALUES (1, 85);
INSERT INTO `sys_role_menu` VALUES (1, 86);
INSERT INTO `sys_role_menu` VALUES (1, 87);
INSERT INTO `sys_role_menu` VALUES (1, 88);
INSERT INTO `sys_role_menu` VALUES (1, 89);
INSERT INTO `sys_role_menu` VALUES (1, 90);
INSERT INTO `sys_role_menu` VALUES (1, 91);
INSERT INTO `sys_role_menu` VALUES (1, 92);

-- ----------------------------
-- Table structure for sys_role_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_user`;
CREATE TABLE `sys_role_user`  (
  `roleId` bigint(20) NOT NULL COMMENT '角色ID',
  `userId` bigint(20) NOT NULL COMMENT '用户ID',
  PRIMARY KEY (`roleId`, `userId`) USING BTREE,
  INDEX `fk_user_id`(`userId`) USING BTREE,
  CONSTRAINT `sys_role_user_ibfk_1` FOREIGN KEY (`roleId`) REFERENCES `sys_role` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `sys_role_user_ibfk_2` FOREIGN KEY (`userId`) REFERENCES `sys_user` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_role_user
-- ----------------------------
INSERT INTO `sys_role_user` VALUES (1, 1);
INSERT INTO `sys_role_user` VALUES (2, 6);
INSERT INTO `sys_role_user` VALUES (5, 8);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '密码',
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `sex` bit(1) NULL DEFAULT NULL COMMENT '性别[0:女, 1:男]',
  `phone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号码',
  `status` tinyint(2) NULL DEFAULT NULL COMMENT '启用状态[0:停用, 1:启用]',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `idx_user_username`(`username`) USING BTREE,
  UNIQUE INDEX `idx_user_email`(`email`) USING BTREE,
  UNIQUE INDEX `idx_user_phone`(`phone`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1, '123456', '$2a$10$VScwIR7yyX1qn26gLnLMueui1hjqBitSJSTgyP8bj3aQhcUTKL0DS', '管理员1', 'https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10', 'm18600000000@163.com', b'1', '18600000000', 1, '2020-06-14 18:23:46', '2020-06-14 18:23:49');
INSERT INTO `sys_user` VALUES (5, '20001', '$2a$10$dCCcRal/r6VDBdTHEAMeXewz5/voh4lNPfKvhXuT5ps9wADHTDTVC', '陈飞鸿', 'https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10', '1787506199a@gmail.com', b'1', '17806707115', 1, '2020-10-09 01:26:30', '2020-10-09 01:26:30');
INSERT INTO `sys_user` VALUES (6, '100001', '$2a$10$WqPjRS2RDkqrkJB9lPwzY.Xl5meVL1cbQyUMyZa7izAWhZ97KrSWS', '黄秋生', 'https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10', '1787506198a@gmail.com', b'1', '17806707118', 1, '2020-10-10 20:48:53', '2020-10-10 20:48:53');
INSERT INTO `sys_user` VALUES (8, '100002', '$2a$10$UoH3Dkt3sZBMMK8I015x7.kZWKItzbLLwXPQkn4d2hrRMQ1LLEfLW', '秋秋', 'https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10', '1787506199@gmail.com', b'1', '17806707101', 1, '2020-10-15 21:24:37', '2020-10-15 21:24:37');
INSERT INTO `sys_user` VALUES (9, '10003', '$2a$10$IyLrStrOEmOuiA0KIfouSOJbPHriAPMQ4r0AvohXsvGeS8HoRzMse', 'chengfeng', 'https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10', '1787506197a@gmail.com', b'1', '17806707105', 1, '2020-10-15 21:25:47', '2020-10-15 21:25:47');

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `summary` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `content` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT 'html内容',
  `textContent` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT 'markdown内容',
  `cover` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '封面',
  `type` tinyint(2) NULL DEFAULT NULL COMMENT '类型[1:原创, 2:转载, 3:翻译]',
  `views` int(11) NULL DEFAULT NULL COMMENT '浏览量',
  `likes` int(11) NULL DEFAULT NULL COMMENT '点赞量',
  `comments` int(11) NULL DEFAULT NULL COMMENT '评论量',
  `appreciable` bit(1) NULL DEFAULT NULL COMMENT '开启赞赏',
  `commentable` bit(1) NULL DEFAULT NULL COMMENT '开启评论',
  `top` bit(1) NULL DEFAULT NULL COMMENT '开启置顶',
  `recommend` bit(1) NULL DEFAULT NULL COMMENT '开启推荐',
  `published` bit(1) NULL DEFAULT NULL COMMENT '是否发布',
  `sort` tinyint(2) NULL DEFAULT NULL COMMENT '排序评分',
  `authorId` bigint(20) NULL DEFAULT NULL COMMENT '作者ID',
  `categoryId` bigint(20) NULL DEFAULT NULL COMMENT '分类ID',
  `status` tinyint(2) NULL DEFAULT NULL COMMENT '审核状态[0:审核未过, 1:等待审核, 2:审核通过]',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_article_category`(`categoryId`) USING BTREE,
  INDEX `idx_article_title`(`title`) USING BTREE,
  INDEX `idx_article_createTime`(`createTime`) USING BTREE,
  INDEX `idx_article_summary`(`summary`) USING BTREE,
  INDEX `idx_article_cover`(`cover`) USING BTREE,
  INDEX `idx_article_sort`(`sort`) USING BTREE,
  INDEX `fk_article_user`(`authorId`) USING BTREE,
  CONSTRAINT `t_article_ibfk_1` FOREIGN KEY (`categoryId`) REFERENCES `t_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `t_article_ibfk_2` FOREIGN KEY (`authorId`) REFERENCES `sys_user` (`id`) ON DELETE SET NULL ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES (1, '认识SSM框架和Redis', 'JavaEE互联网轻量级框架整合开发第一章', '<h2 id=\"h2-spring-\"><a name=\"Spring框架：应用最广泛的框架\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>\n<ul>\n<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>\n<h3 id=\"h3-spring-ioc\"><a name=\"Spring IoC\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>\n<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>\n<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>\n<p>例子：使用插座</p>\n<p><img src=\"http://cdn.alanliang.site/note/使用插座图.jpg\" alt=\"使用插座\"></p>\n<p>用传统的方式管理对象</p>\n<p>现在使用插座1,代码如下：</p>\n<pre><code class=\"lang-java\">Socket socket = new Socket1();\nuser.setSocket(socket);\nuser.userSocket;\n</code></pre>\n<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>\n<pre><code class=\"lang-java\">Socket socket = new Socket2();\nuser.setSocket(socket);\nuser.userSocket;\n</code></pre>\n<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>\n<p>用Spring IoC容器管理对象</p>\n<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>\n<pre><code class=\"lang-xml\">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;\n&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;\n    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>\n<pre><code class=\"lang-xml\">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;\n&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;\n    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>\n<p><img src=\"http://cdn.alanliang.site/note/Spring的控制反转.png\" alt=\"Spring的控制反转\"></p>\n<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>\n<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>\n<h3 id=\"h3-spring-aop\"><a name=\"Spring AOP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Spring AOP</h3><p>订单超预算例子：</p>\n<p><img src=\"http://cdn.alanliang.site/note/订单超预算.png\" alt=\"订单超预算\"></p>\n<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>\n<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>\n<pre><code class=\"lang-java\">/**\n* Spring AOP处理订单伪代码\n* @param order 订单\n**/\nprivate void proceed(Order order){\n    //判断生产部门是否通过订单，数据库记录订单\n    boolean pflag = productionDept.isPass(order);\n    if(pflag){//如果生产部门通过进行财务部门审批\n        if(financialDept.isOverBudget(order)){//财务审批是否超限\n            throw new RuntimeException(&quot;预算超限！！！&quot;);\n        }\n    }\n}\n</code></pre>\n<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>\n<h2 id=\"h2-mybatis\"><a name=\"MyBatis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>\n<h2 id=\"h2-hibernate\"><a name=\"Hibernate\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Hibernate</h2><p>完全面向POJO</p>\n<p>Hibernate和Mybatis的区别</p>\n<ul>\n<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>\n</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>\n</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>\n</li></ul>\n<h2 id=\"h2-spring-mvc\"><a name=\"Spring MVC\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>\n<h2 id=\"h2-redis\"><a name=\"Redis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>\n', '##Spring框架：应用最广泛的框架\n\n成功来自于理念：\n\n- IoC（Inversion of Control，控制反转）\n- AOP（Aspect Oriented Programming，面向切面编程）\n\n###Spring IoC\n\nIoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。\n\nJavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。\n\nSpring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。\n\n例子：使用插座\n\n![使用插座](http://cdn.alanliang.site/note/使用插座图.jpg)\n\n用传统的方式管理对象\n\n现在使用插座1,代码如下：\n\n```java\nSocket socket = new Socket1();\nuser.setSocket(socket);\nuser.userSocket;\n```\n\n这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：\n\n```java\nSocket socket = new Socket2();\nuser.setSocket(socket);\nuser.userSocket;\n```\n\n可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。\n\n用Spring IoC容器管理对象\n\n现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：\n\n```xml\n<bean id=\"socket\" class=\"Socket1\"></bean>\n<bean id=\"user\" class=\"User\">\n	<property name=\"socket\" ref=\"socket\"></property>\n</bean>\n```\n\n当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：\n\n```xml\n<bean id=\"socket\" class=\"Socket2\"></bean>\n<bean id=\"user\" class=\"User\">\n	<property name=\"socket\" ref=\"socket\"></property>\n</bean>\n```\n\n这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：\n\n![Spring的控制反转](http://cdn.alanliang.site/note/Spring的控制反转.png)\n\n图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。\n\n这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。\n\n###Spring AOP\n\n订单超预算例子：\n\n![订单超预算](http://cdn.alanliang.site/note/订单超预算.png)\n\n实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。\n\nSpring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：\n\n```java\n/**\n* Spring AOP处理订单伪代码\n* @param order 订单\n**/\nprivate void proceed(Order order){\n    //判断生产部门是否通过订单，数据库记录订单\n    boolean pflag = productionDept.isPass(order);\n    if(pflag){//如果生产部门通过进行财务部门审批\n        if(financialDept.isOverBudget(order)){//财务审批是否超限\n            throw new RuntimeException(\"预算超限！！！\");\n        }\n    }\n}\n```\n\n这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。\n\n##MyBatis\n\n一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。\n\n##Hibernate\n\n完全面向POJO\n\nHibernate和Mybatis的区别\n\n- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；\n\n- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。\n\n- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等\n\n##Spring MVC\n\n结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。\n\n##Redis\n\n最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。\n\n', '/static/admin/img/1.jpg', 1, 4, 0, 0, b'1', b'1', b'0', b'0', b'1', 1, 1, 1, 2, '2020-06-15 19:39:08', '2020-06-15 10:42:27');
INSERT INTO `t_article` VALUES (2, 'Java设计模式', 'JavaEE互联网轻量级框架整合开发第二章', '<h2 id=\"h2-u524Du8A00\"><a name=\"前言\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>\n<h2 id=\"h2-1-\"><a name=\"1    什么是设计模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1    什么是设计模式</h2><blockquote>\n<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n</blockquote>\n<h2 id=\"h2-2-java-\"><a name=\"2    Java反射技术\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>\n<p>我们简单了解一下反射的应用：</p>\n<h3 id=\"h3-2-1-\"><a name=\"2.1    通过反射构建对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>\n<pre><code class=\"lang-java\">public class ReflectServiceImpl {\n    public void sayHello(String name) {\n        System.err.println(&quot;Hello &quot; + name);\n    }\n\n    public ReflectServiceImpl getInstance(){\n        ReflectServiceImpl object =null;\n        try {\n            //通过反射生成对象\n            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();\n\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return object;\n    }\n}\n</code></pre>\n<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>\n<pre><code class=\"lang-java\">public class ReflectServiceImpl2 {\n\n    private String name;\n\n    public ReflectServiceImpl2(String name) {\n        this.name = name;\n    }\n\n    public void sayHello(String name) {\n        System.err.println(&quot;Hello &quot; + name);\n    }\n\n    public ReflectServiceImpl2 getInstance(){\n        ReflectServiceImpl2 object =null;\n        try {\n             //通过反射生成对象\n            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)\n                    .getConstructor(String.class)\n                    .newInstance(&quot;张三&quot;);\n\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        return object;\n    }\n}\n</code></pre>\n<ul>\n<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>\n</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>\n</li></ul>\n<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>\n<h3 id=\"h3-2-2-\"><a name=\"2.2    反射方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.2    反射方法</h3><p>代码如下：</p>\n<pre><code class=\"lang-java\">public Object reflectMethod() {\n        Object returnObj = null;\n        ReflectServiceImpl target = new ReflectServiceImpl();\n        try {\n            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);\n\n            //当有具体对象target但不知道它是哪个类的可以这样写\n            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);\n            //调用方法，相当于target.sayHello(&quot;张三&quot;)\n            returnObj = method.invoke(target, &quot;张三&quot;);\n\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        return returnObj;\n    }\n</code></pre>\n<h3 id=\"h3-2-3-\"><a name=\"2.3    实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.3    实例</h3><p>代码如下：</p>\n<pre><code class=\"lang-java\">public static Object reflect() {\n    ReflectServiceImpl object = null;\n    try {\n        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)\n                .newInstance();\n        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);\n        method.invoke(object,&quot;张三&quot;);\n    } catch (InstantiationException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (NoSuchMethodException e) {\n        e.printStackTrace();\n    } catch (InvocationTargetException e) {\n        e.printStackTrace();\n    }\n    return object;\n}\n\npublic static void main(String[] args) {\n    ReflectServiceImpl.reflect();\n}\n</code></pre>\n<p>运行程序，得到以下结果：</p>\n<pre><code>Hello 张三\n</code></pre><h2 id=\"h2-3-\"><a name=\"3    动态代理模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>\n<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>\n<p><img src=\"http://cdn.alanliang.site/note/代理模式示意图.png\" alt=\"代理模式示意图\"></p>\n<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>\n<p>代理分为两个步骤：</p>\n<ol>\n<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>\n</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>\n</li></ol>\n<p>Java中最常用的动态代理技术有：</p>\n<ul>\n<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>\n</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>\n<h3 id=\"h3-3-1jdk-\"><a name=\"3.1JDK动态代理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.1JDK动态代理</h3></li></ul>\n<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>\n<pre><code class=\"lang-java\">public interface HelloWorld{\n    public void sayHelloWorld();\n}\n</code></pre>\n<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>\n<pre><code class=\"lang-java\">public class HelloWorldImpl implements HelloWorld{\n    @Override\n    public void sayHelloWorld(){\n        System.out.println(&quot;Hello World&quot;);\n    }\n}\n</code></pre>\n<p>动态代理绑定和代理逻辑实现，代码如下：</p>\n<pre><code class=\"lang-java\">public class JdkProxyExample implements InvocationHandler {\n\n    //真实对象\n    private Object target = null;\n\n    /**\n     * 建立代理对象和真实对象的代理关系\n     *\n     * @param target 真实对象\n     * @return 代理对象\n     */\n    public Object bind(Object target) {\n        this.target = target;\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);\n    }\n\n    /**\n     * 代理方法逻辑\n     * @param proxy 代理对象\n     * @param method 当前调度方法\n     * @param args 当前方法参数\n     * @return 代理结果返回\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(&quot;进入代理逻辑方法&quot;);\n        System.out.println(&quot;在调用真实对象之前的服务&quot;);\n        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法\n        System.out.println(&quot;在调用真实对象之后的服务&quot;);\n        return obj;\n    }\n}\n</code></pre>\n<p>测试JDK动态代理，代码如下：</p>\n<pre><code class=\"lang-java\">public class TestProxy {\n\n    @Test\n    public void testJdkProxy() {\n        JdkProxyExample jdkProxy = new JdkProxyExample();\n        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy\n        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());\n        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里\n        proxy.sayHelloWorld();\n    }\n}\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code>进入代理逻辑方法\n在调度真实对象之前的服务\nHello World\n在调用真实对象之后的服务\n</code></pre><h3 id=\"h3-3-2-cglib-\"><a name=\"3.2    CGLIB动态代理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>\n<pre><code class=\"lang-java\">public class CglibProxyExample implements MethodInterceptor {\n\n    /**\n     * 生成CGLIB代理对象\n     * @param clazz Class类\n     * @return Class类的CGLIB对象\n     */\n    public Object getProxy(Class clazz) {\n        //CGLIB enhancer增强类对象\n        Enhancer enhancer = new Enhancer();\n        //设置增强类型\n        enhancer.setSuperclass(clazz);\n        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法\n        enhancer.setCallback(this);\n        //生成并返回代理对象\n        return enhancer.create();\n    }\n\n    /**\n     * 代理逻辑方法\n     * @param proxy 代理对象\n     * @param method 执行方法\n     * @param args 方法参数\n     * @param methodProxy 方法代理\n     * @return 代理逻辑返回\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        System.out.println(&quot;调用真实对象前&quot;);\n        Object result = methodProxy.invokeSuper(proxy, args);\n        System.out.println(&quot;调用真实对象后&quot;);\n        return result;\n    }\n}\n</code></pre>\n<p>测试CGLIB动态代理，代码如下：</p>\n<pre><code class=\"lang-java\">public class TestProxy {\n\n    @Test\n    public void testCGLIBProxy(){\n        CglibProxyExample cglibProxyExample = new CglibProxyExample();\n        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);\n        obj.sayHello(&quot;张三&quot;);\n    }\n}\n</code></pre>\n<p>测试结果如下：</p>\n<pre><code>调用真实对象前\nHello 张三\n调用真实对象后\n</code></pre><h3 id=\"h3-3-3-\"><a name=\"3.3    拦截器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>\n<h3 id=\"h3-3-4-\"><a name=\"3.4    实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>\n<pre><code class=\"lang-java\">public interface Interceptor {\n    /**\n     * 在真实对象前调用\n     * @param proxy 代理对象\n     * @param target 真实对象\n     * @param method 调用方法\n     * @param args 方法参数\n     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法\n     * 当返回真实对象方法或者around方法执行后，调用after方法\n     */\n    public boolean before(Object proxy, Object target, Method method,Object[] args);\n\n    public void around(Object proxy, Object target, Method method,Object[] args);\n\n    public void after(Object proxy, Object target, Method method,Object[] args);\n}\n</code></pre>\n<p>实现这个接口，代码如下：</p>\n<pre><code class=\"lang-java\">public class MyInterceptor implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;反射方法前逻辑&quot;);\n        return false;//不反射被代理对象原有方法\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;反射方法后逻辑&quot;);\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;取代了被代理对象的方法&quot;);\n    }\n}\n</code></pre>\n<p>在JDK动态代理中使用拦截器，代码如下：</p>\n<pre><code class=\"lang-java\">public class InterceptorJdkProxy implements InvocationHandler {\n    //真实对象\n    private Object target = null;\n    //拦截器全限定名\n    private String interceptorClass = null;\n\n    public InterceptorJdkProxy(Object target, String interceptorClass) {\n        this.target = target;\n        this.interceptorClass = interceptorClass;\n    }\n\n\n    /**\n     * 绑定委托对象并返回一个[代理占位]\n     *\n     * @param target 真实对象\n     * @return 代理对象[占位]\n     */\n    public static Object bind(Object target, String InterceptorClass) {\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));\n    }\n\n    /**\n     * 通过代理对象调用方法，首先进入这个方法\n     *\n     * @param proxy  代理对象\n     * @param method 被调用方法\n     * @param args   方法参数\n     * @return 代理结果返回\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (interceptorClass == null) {\n            //没有设置拦截器则直接反射原有方法\n            return method.invoke(target, args);\n        }\n        Object result = null;\n        //通过反射生成拦截器\n        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();\n        //调用前置方法\n        if (interceptor.before(proxy, target, method, args)) {\n            //返回true反射原有对象方法\n            result = method.invoke(target, args);\n        } else {\n            //返回false执行around方法\n            interceptor.around(proxy, target, method, args);\n        }\n        //调用后置方法\n        interceptor.after(proxy, target, method, args);\n        return result;\n    }\n}\n</code></pre>\n<p>代码的执行步骤：</p>\n<ol>\n<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>\n<p>测试拦截器，代码如下：</p>\n<pre><code class=\"lang-java\">public class TestInterceptor {\n\n    @Test\n    public void testInterceptor(){\n       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);\n       proxy.sayHelloWorld();\n    }\n}\n</code></pre>\n<p>测试结果如下：</p>\n<pre><code>反射方法前逻辑\n反射方法后逻辑\n取代了被代理对象的方法\n</code></pre><h2 id=\"h2-4-\"><a name=\"4    责任链模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>\n<p><img src=\"http://cdn.alanliang.site/note/请假示例.png\" alt=\"请假示例\"></p>\n<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>\n<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>\n<p>拦截逻辑如下图：</p>\n<p><img src=\"http://cdn.alanliang.site/note/拦截逻辑.png\" alt=\"拦截逻辑\"></p>\n<h3 id=\"h3-4-1-\"><a name=\"4.1    实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>\n<pre><code class=\"lang-java\">public class Interceptor1 implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;【拦截器1】的before方法&quot;);\n        return true;\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;【拦截器1】的after方法&quot;);\n    }\n}\n/************************************拦截器2*************************************/\npublic class Interceptor2 implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;【拦截器2】的before方法&quot;);\n        return true;\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;【拦截器2】的after方法&quot;);\n    }\n}\n/************************************拦截器3*************************************/\npublic class Interceptor3 implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;【拦截器3】的before方法&quot;);\n        return true;\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(&quot;【拦截器3】的after方法&quot;);\n    }\n}\n</code></pre>\n<p>测试责任链模式，代码如下：</p>\n<pre><code class=\"lang-java\">@Test\npublic void testInterceptors() {\n    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);\n    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);\n    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);\n    proxy3.sayHelloWorld();\n}\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code>【拦截器3】的before方法\n【拦截器2】的before方法\n【拦截器1】的before方法\nHello World\n【拦截器1】的after方法\n【拦截器2】的after方法\n【拦截器3】的after方法\n</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>\n<h2 id=\"h2-5-observer-\"><a name=\"5    观察者（Observer）模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>\n<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>\n<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>\n<pre><code>if(产品库有新产品){\n    推送新产品到淘宝;\n    推送新产品到京东；\n}\n</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>\n<pre><code>if(产品库有新产品){\n    推送新产品到淘宝;\n    推送新产品到京东；\n    推送新产品到国美;\n    推送新产品到苏宁；\n    推送新产品到当当;\n    推送新产品到唯品会；\n}\n</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>\n<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>\n<p>​    <img src=\"http://cdn.alanliang.site/note/观察者模式示例.jpg\" alt=\"观察者模式示例\"></p>\n<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>\n<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>\n<h3 id=\"h3-5-1-\"><a name=\"5.1    实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>\n<pre><code class=\"lang-java\">public class ProductList extends Observable {\n    //产品列表\n    private List&lt;String&gt; productList = null;\n    //类的唯一实例\n    private static ProductList instance;\n\n    //构造方法私有化\n    private ProductList() {\n    }\n\n    /**\n     * 取得唯一实例\n     *\n     * @return 产品列表唯一实例\n     */\n    public static ProductList getInstance() {\n        if (instance == null) {\n            instance = new ProductList();\n            instance.productList = new ArrayList&lt;&gt;();\n        }\n        return instance;\n    }\n\n    /**\n     * 增加观察者（电商接口）\n     * @param observer 观察者\n     */\n    public void addProductListObserver(Observer observer) {\n        this.addObserver(observer);\n    }\n\n    /**\n     * 新增产品\n     * @param newProduct 新产品\n     */\n    public void addProduct(String newProduct){\n        productList.add(newProduct);\n        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);\n        this.setChanged();//设置被观察对象发生变化\n        this.notifyObservers(newProduct);//通知观察者，并传递新产品\n    }\n}\n</code></pre>\n<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>\n<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>\n<pre><code class=\"lang-java\">public class TaoBaoObserver implements Observer {\n    @Override\n    public void update(Observable o, Object product) {\n        String newProduct = (String) product;\n        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class JingDongObserver implements Observer {\n    @Override\n    public void update(Observable o, Object product) {\n        String newProduct = (String) product;\n        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);\n    }\n}\n</code></pre>\n<p>测试观察者模式，代码如下：</p>\n<pre><code class=\"lang-java\">ublic class TestObserver {\n    @Test\n    public void testObserver() {\n        ProductList observable = ProductList.getInstance();\n        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();\n        JingDongObserver jingDongObserver = new JingDongObserver();\n        observable.addObserver(taoBaoObserver);\n        observable.addObserver(jingDongObserver);\n        observable.addProduct(&quot;新增产品1&quot;);\n    }\n}\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code>产品列表增加了新的产品 新增产品1\n发送新产品【新增产品1】同步到京东商城\n发送新产品【新增产品1】同步到淘宝商城\n</code></pre><h2 id=\"h2-6-\"><a name=\"6    工厂模式和抽象工厂模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>\n<h3 id=\"h3-6-1-simple-factory-\"><a name=\"6.1    普通工厂（Simple Factory）模式：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>\n<p><img src=\"http://cdn.alanliang.site/note/产品工厂模式.jpg\" alt=\"产品工厂模式\"></p>\n<p><code>ProductFactory</code>的伪代码如下：</p>\n<pre><code class=\"lang-java\">public class ProductFactory{\n    public static IProduct createProduct(String productNo){\n        switch(productNo){\n            case &quot;1&quot;:return new Product1(XXX);\n            case &quot;2&quot;:return new Product2(XXX);\n            case &quot;3&quot;:return new Product3(XXX);\n            case &quot;4&quot;:return new Product4(XXX);\n            case &quot;5&quot;:return new Product5(XXX);\n            default:\n                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);\n        }\n    }\n}\n</code></pre>\n<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>\n<h3 id=\"h3-6-2-abstract-factory-\"><a name=\"6.2    抽象工厂（Abstract Factory）模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>\n<p><img src=\"http://cdn.alanliang.site/note/抽象工厂示意图.jpg\" alt=\"抽象工厂示意图\"></p>\n<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>\n<pre><code class=\"lang-java\">public interface IProductFactory {\n    public IProduct createProduct(String productNo);\n}\n</code></pre>\n<p>现在再实现3个工厂类，代码如下：</p>\n<pre><code class=\"lang-java\">public class ProductFactory1 implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则\n        return product;\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class ProductFactory2 implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则\n        return product;\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class ProductFactory3 implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则\n        return product;\n    }\n}\n</code></pre>\n<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>\n<pre><code class=\"lang-java\">public class ProductFactory implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        char ch = productNo.charAt(0);\n        IProductFactory factory = null;\n        if (ch == &#39;1&#39;) {\n            factory = new ProductFactory1();\n        } else if (ch == &#39;2&#39;) {\n            factory = new ProductFactory2();\n        } else if (ch == &#39;3&#39;) {\n            factory = new ProductFactory3();\n        }\n        if (factory != null) {\n            return factory.createProduct(productNo);\n        }\n        return null;\n    }\n}\n</code></pre>\n<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>\n<h2 id=\"h2-7-builder-\"><a name=\"7    建造者（Builder）模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>\n<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>\n<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>\n<h3 id=\"h3-7-1-\"><a name=\"7.1    实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>\n<pre><code class=\"lang-java\">public class TicketHelper {\n    public void buildAdult(String info) {\n        System.out.println(&quot;构建成年人票逻辑：&quot; + info);\n    }\n\n    public void buildChildrenForSeat(String info) {\n        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);\n    }\n\n    public void buildChildrenForNoSeat(String info) {\n        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);\n    }\n\n    public void buildElderly(String info) {\n        System.out.println(&quot;构建老年人票逻辑：&quot; + info);\n    }\n\n    public void buildSoldier(String info) {\n        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);\n    }\n}\n</code></pre>\n<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>\n<pre><code class=\"lang-java\">public class TicketBuilder {\n    public static Object builder(TicketHelper helper){\n        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);\n        return null;\n    }\n}\n</code></pre>\n<p>通过这两个类就可以构建出套票，代码如下：</p>\n<pre><code class=\"lang-java\">public class TestBuilder {\n    @Test\n    public void testBuilder() {\n        TicketHelper helper = new TicketHelper();\n        helper.buildAdult(&quot;成人票&quot;);\n        helper.buildChildrenForSeat(&quot;有座儿童&quot;);\n        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);\n        helper.buildElderly(&quot;老年人票&quot;);\n        helper.buildSoldier(&quot;军人票&quot;);\n        Object ticket = TicketBuilder.builder(helper);\n    }\n}\n</code></pre>\n<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>\n', '##前言\n\n在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。\n\n##1	什么是设计模式\n\n> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n##2	Java反射技术\n\nJava反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。\n\n我们简单了解一下反射的应用：\n\n### 2.1	通过反射构建对象\n\n（1）通过**无参构造**方式构建对象，代码如下：\n\n```java\npublic class ReflectServiceImpl {\n    public void sayHello(String name) {\n        System.err.println(\"Hello \" + name);\n    }\n\n    public ReflectServiceImpl getInstance(){\n        ReflectServiceImpl object =null;\n        try {\n            //通过反射生成对象\n            object= (ReflectServiceImpl) Class.forName(\"com.ssm.learn.chapter2.reflect.ReflectServiceImpl\").newInstance();\n            \n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return object;\n    }\n}\n\n```\n\n（2）通过**有参构造**方式构建对象，代码如下：\n\n```java\npublic class ReflectServiceImpl2 {\n\n    private String name;\n\n    public ReflectServiceImpl2(String name) {\n        this.name = name;\n    }\n\n    public void sayHello(String name) {\n        System.err.println(\"Hello \" + name);\n    }\n\n    public ReflectServiceImpl2 getInstance(){\n        ReflectServiceImpl2 object =null;\n        try {\n             //通过反射生成对象\n            object= (ReflectServiceImpl2) Class.forName(\"com.ssm.learn.chapter2.reflect.ReflectServiceImpl2\")\n                    .getConstructor(String.class)\n                    .newInstance(\"张三\");\n            \n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        return object;\n    }\n}\n\n```\n\n- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。\n\n- 反射的**缺点**：运行较慢。\n\nSpring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。\n\n### 2.2	反射方法\n\n代码如下：\n\n```java\npublic Object reflectMethod() {\n        Object returnObj = null;\n        ReflectServiceImpl target = new ReflectServiceImpl();\n        try {\n            //Method method = ReflectServiceImpl.class.getMethod(\"sayHello\", String.class);\n            \n            //当有具体对象target但不知道它是哪个类的可以这样写\n            Method method = target.getClass().getMethod(\"sayHello\", String.class);\n            //调用方法，相当于target.sayHello(\"张三\")\n            returnObj = method.invoke(target, \"张三\");\n            \n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        return returnObj;\n    }\n```\n\n### 2.3	实例\n\n代码如下：\n\n```java\npublic static Object reflect() {\n    ReflectServiceImpl object = null;\n    try {\n        object = (ReflectServiceImpl) Class.forName(\"com.ssm.learn.chapter2.reflect.ReflectServiceImpl\")\n                .newInstance();\n        Method method = object.getClass().getMethod(\"sayHello\", String.class);\n        method.invoke(object,\"张三\");\n    } catch (InstantiationException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (NoSuchMethodException e) {\n        e.printStackTrace();\n    } catch (InvocationTargetException e) {\n        e.printStackTrace();\n    }\n    return object;\n}\n\npublic static void main(String[] args) {\n    ReflectServiceImpl.reflect();\n}\n```\n\n运行程序，得到以下结果：\n\n```\nHello 张三\n```\n\n##3	动态代理模式\n\n**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**\n\n举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：\n\n![代理模式示意图](http://cdn.alanliang.site/note/代理模式示意图.png)\n\n**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**\n\n代理分为两个步骤：\n\n1. **代理对象和真实对象之间建立代理关系**\n\n2. **实现代理对象的代理逻辑方法**\n\nJava中最常用的动态代理技术有：\n\n- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂\n\n- **CGLIB**。第三方提供技术，不必使用接口，比较简单\n\n  ###3.1JDK动态代理\n\n首先定义`HelloWorld`接口，代码如下：\n\n```java\npublic interface HelloWorld{\n    public void sayHelloWorld();\n}\n```\n\n然后提供实现类`HelloWorldImp`l来实现接口，代码如下：\n\n```java\npublic class HelloWorldImpl implements HelloWorld{\n    @Override\n    public void sayHelloWorld(){\n        System.out.println(\"Hello World\");\n    }\n}\n```\n\n动态代理绑定和代理逻辑实现，代码如下：\n\n```java\npublic class JdkProxyExample implements InvocationHandler {\n\n    //真实对象\n    private Object target = null;\n\n    /**\n     * 建立代理对象和真实对象的代理关系\n     *\n     * @param target 真实对象\n     * @return 代理对象\n     */\n    public Object bind(Object target) {\n        this.target = target;\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);\n    }\n\n    /**\n     * 代理方法逻辑\n     * @param proxy 代理对象\n     * @param method 当前调度方法\n     * @param args 当前方法参数\n     * @return 代理结果返回\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"进入代理逻辑方法\");\n        System.out.println(\"在调用真实对象之前的服务\");\n        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法\n        System.out.println(\"在调用真实对象之后的服务\");\n        return obj;\n    }\n}\n```\n\n测试JDK动态代理，代码如下：\n\n```java\npublic class TestProxy {\n\n    @Test\n    public void testJdkProxy() {\n        JdkProxyExample jdkProxy = new JdkProxyExample();\n        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy\n        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());\n        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里\n        proxy.sayHelloWorld();\n    }\n}\n```\n\n运行结果如下：\n\n```\n进入代理逻辑方法\n在调度真实对象之前的服务\nHello World\n在调用真实对象之后的服务\n```\n\n###3.2	CGLIB动态代理\n\n代码如下：\n\n```java\npublic class CglibProxyExample implements MethodInterceptor {\n\n    /**\n     * 生成CGLIB代理对象\n     * @param clazz Class类\n     * @return Class类的CGLIB对象\n     */\n    public Object getProxy(Class clazz) {\n        //CGLIB enhancer增强类对象\n        Enhancer enhancer = new Enhancer();\n        //设置增强类型\n        enhancer.setSuperclass(clazz);\n        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法\n        enhancer.setCallback(this);\n        //生成并返回代理对象\n        return enhancer.create();\n    }\n\n    /**\n     * 代理逻辑方法\n     * @param proxy 代理对象\n     * @param method 执行方法\n     * @param args 方法参数\n     * @param methodProxy 方法代理\n     * @return 代理逻辑返回\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"调用真实对象前\");\n        Object result = methodProxy.invokeSuper(proxy, args);\n        System.out.println(\"调用真实对象后\");\n        return result;\n    }\n}\n\n```\n\n测试CGLIB动态代理，代码如下：\n\n```java\npublic class TestProxy {\n\n    @Test\n    public void testCGLIBProxy(){\n        CglibProxyExample cglibProxyExample = new CglibProxyExample();\n        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);\n        obj.sayHello(\"张三\");\n    }\n}\n```\n\n测试结果如下：\n\n```\n调用真实对象前\nHello 张三\n调用真实对象后\n```\n\n###3.3	拦截器\n\n由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。\n\n###3.4	实例\n\n用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：\n\n```java\npublic interface Interceptor {\n    /**\n     * 在真实对象前调用\n     * @param proxy 代理对象\n     * @param target 真实对象\n     * @param method 调用方法\n     * @param args 方法参数\n     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法\n     * 当返回真实对象方法或者around方法执行后，调用after方法\n     */\n    public boolean before(Object proxy, Object target, Method method,Object[] args);\n\n    public void around(Object proxy, Object target, Method method,Object[] args);\n\n    public void after(Object proxy, Object target, Method method,Object[] args);\n}\n```\n\n实现这个接口，代码如下：\n\n```java\npublic class MyInterceptor implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"反射方法前逻辑\");\n        return false;//不反射被代理对象原有方法\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"反射方法后逻辑\");\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"取代了被代理对象的方法\");\n    }\n}\n```\n\n在JDK动态代理中使用拦截器，代码如下：\n\n```java\npublic class InterceptorJdkProxy implements InvocationHandler {\n    //真实对象\n    private Object target = null;\n    //拦截器全限定名\n    private String interceptorClass = null;\n\n    public InterceptorJdkProxy(Object target, String interceptorClass) {\n        this.target = target;\n        this.interceptorClass = interceptorClass;\n    }\n\n\n    /**\n     * 绑定委托对象并返回一个[代理占位]\n     *\n     * @param target 真实对象\n     * @return 代理对象[占位]\n     */\n    public static Object bind(Object target, String InterceptorClass) {\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));\n    }\n\n    /**\n     * 通过代理对象调用方法，首先进入这个方法\n     *\n     * @param proxy  代理对象\n     * @param method 被调用方法\n     * @param args   方法参数\n     * @return 代理结果返回\n     * @throws Throwable 异常\n     */\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (interceptorClass == null) {\n            //没有设置拦截器则直接反射原有方法\n            return method.invoke(target, args);\n        }\n        Object result = null;\n        //通过反射生成拦截器\n        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();\n        //调用前置方法\n        if (interceptor.before(proxy, target, method, args)) {\n            //返回true反射原有对象方法\n            result = method.invoke(target, args);\n        } else {\n            //返回false执行around方法\n            interceptor.around(proxy, target, method, args);\n        }\n        //调用后置方法\n        interceptor.after(proxy, target, method, args);\n        return result;\n    }\n}\n```\n\n代码的执行步骤：\n\n1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。\n2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。\n3. 通过反射生成拦截器，并准备使用它。\n4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。\n5. 调用拦截器的`after`方法\n6. 返回结果\n\n测试拦截器，代码如下：\n\n```java\npublic class TestInterceptor {\n\n    @Test\n    public void testInterceptor(){\n       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),\"com.ssm.learn.chapter2.interceptor.MyInterceptor\");\n       proxy.sayHelloWorld();\n    }\n}\n\n```\n\n测试结果如下：\n\n```\n反射方法前逻辑\n反射方法后逻辑\n取代了被代理对象的方法\n```\n\n##4	责任链模式\n\n举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：\n\n![请假示例](http://cdn.alanliang.site/note/请假示例.png)\n\n**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**\n\n回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。\n\n拦截逻辑如下图：\n\n![拦截逻辑](http://cdn.alanliang.site/note/拦截逻辑.png)\n\n###4.1	实例\n\n定义三个拦截器，代码如下：\n\n```java\npublic class Interceptor1 implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"【拦截器1】的before方法\");\n        return true;\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"【拦截器1】的after方法\");\n    }\n}\n/************************************拦截器2*************************************/\npublic class Interceptor2 implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"【拦截器2】的before方法\");\n        return true;\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"【拦截器2】的after方法\");\n    }\n}\n/************************************拦截器3*************************************/\npublic class Interceptor3 implements Interceptor{\n    @Override\n    public boolean before(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"【拦截器3】的before方法\");\n        return true;\n    }\n\n    @Override\n    public void around(Object proxy, Object target, Method method, Object[] args) {\n\n    }\n\n    @Override\n    public void after(Object proxy, Object target, Method method, Object[] args) {\n        System.out.println(\"【拦截器3】的after方法\");\n    }\n}\n```\n\n测试责任链模式，代码如下：\n\n```java\n@Test\npublic void testInterceptors() {\n    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), \"com.ssm.learn.chapter2.interceptor.Interceptor1\");\n    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, \"com.ssm.learn.chapter2.interceptor.Interceptor2\");\n    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, \"com.ssm.learn.chapter2.interceptor.Interceptor3\");\n    proxy3.sayHelloWorld();\n}\n```\n\n运行结果如下：\n\n```\n【拦截器3】的before方法\n【拦截器2】的before方法\n【拦截器1】的before方法\nHello World\n【拦截器1】的after方法\n【拦截器2】的after方法\n【拦截器3】的after方法\n```\n\n**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**\n\n##5	观察者（Observer）模式\n\n**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**\n\n例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。\n\n例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：\n\n```\nif(产品库有新产品){\n	推送新产品到淘宝;\n	推送新产品到京东；\n}\n```\n\n如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：\n\n```\nif(产品库有新产品){\n	推送新产品到淘宝;\n	推送新产品到京东；\n	推送新产品到国美;\n	推送新产品到苏宁；\n	推送新产品到当当;\n	推送新产品到唯品会；\n}\n```\n\n按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。\n\n**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：\n\n​	![观察者模式示例](http://cdn.alanliang.site/note/观察者模式示例.jpg)\n\n**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**\n\n**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**\n\n###5.1	实例\n\n被观察者——产品列表，继承`Observable`类，代码如下：\n\n```java\npublic class ProductList extends Observable {\n    //产品列表\n    private List<String> productList = null;\n    //类的唯一实例\n    private static ProductList instance;\n\n    //构造方法私有化\n    private ProductList() {\n    }\n\n    /**\n     * 取得唯一实例\n     *\n     * @return 产品列表唯一实例\n     */\n    public static ProductList getInstance() {\n        if (instance == null) {\n            instance = new ProductList();\n            instance.productList = new ArrayList<>();\n        }\n        return instance;\n    }\n\n    /**\n     * 增加观察者（电商接口）\n     * @param observer 观察者\n     */\n    public void addProductListObserver(Observer observer) {\n        this.addObserver(observer);\n    }\n\n    /**\n     * 新增产品\n     * @param newProduct 新产品\n     */\n    public void addProduct(String newProduct){\n        productList.add(newProduct);\n        System.out.println(\"产品列表增加了新的产品 \"+newProduct);\n        this.setChanged();//设置被观察对象发生变化\n        this.notifyObservers(newProduct);//通知观察者，并传递新产品\n    }\n}\n```\n\n这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。\n\n观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：\n\n```java\npublic class TaoBaoObserver implements Observer {\n    @Override\n    public void update(Observable o, Object product) {\n        String newProduct = (String) product;\n        System.out.println(\"发送新产品【\" + newProduct + \"】同步到淘宝商城\");\n    }\n}\n```\n\n```java\npublic class JingDongObserver implements Observer {\n    @Override\n    public void update(Observable o, Object product) {\n        String newProduct = (String) product;\n        System.out.println(\"发送新产品【\" + newProduct + \"】同步到京东商城\");\n    }\n}\n```\n\n测试观察者模式，代码如下：\n\n```java\nublic class TestObserver {\n    @Test\n    public void testObserver() {\n        ProductList observable = ProductList.getInstance();\n        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();\n        JingDongObserver jingDongObserver = new JingDongObserver();\n        observable.addObserver(taoBaoObserver);\n        observable.addObserver(jingDongObserver);\n        observable.addProduct(\"新增产品1\");\n    }\n}\n```\n\n运行结果如下：\n\n```\n产品列表增加了新的产品 新增产品1\n发送新产品【新增产品1】同步到京东商城\n发送新产品【新增产品1】同步到淘宝商城\n```\n\n##6	工厂模式和抽象工厂模式\n\n在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。\n\n###6.1	普通工厂（Simple Factory）模式：\n\n例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	\n\n![产品工厂模式](http://cdn.alanliang.site/note/产品工厂模式.jpg)\n\n`ProductFactory`的伪代码如下：\n\n```java\npublic class ProductFactory{\n    public static IProduct createProduct(String productNo){\n        switch(productNo){\n            case \"1\":return new Product1(XXX);\n            case \"2\":return new Product2(XXX);\n            case \"3\":return new Product3(XXX);\n            case \"4\":return new Product4(XXX);\n            case \"5\":return new Product5(XXX);\n            default:\n                throw new NotSupprotedException(\"未支持此编号产品生产。\");\n        }\n    }\n}\n```\n\n对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。\n\n###6.2	抽象工厂（Abstract Factory）模式\n\n抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：\n\n![抽象工厂示意图](http://cdn.alanliang.site/note/抽象工厂示意图.jpg)\n\n为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：\n\n```java\npublic interface IProductFactory {\n    public IProduct createProduct(String productNo);\n}\n```\n\n现在再实现3个工厂类，代码如下：\n\n```java\npublic class ProductFactory1 implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则\n        return product;\n    }\n}\n```\n\n```java\npublic class ProductFactory2 implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则\n        return product;\n    }\n}\n```\n\n```java\npublic class ProductFactory3 implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则\n        return product;\n    }\n}\n```\n\n使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：\n\n```java\npublic class ProductFactory implements IProductFactory {\n    @Override\n    public IProduct createProduct(String productNo) {\n        char ch = productNo.charAt(0);\n        IProductFactory factory = null;\n        if (ch == \'1\') {\n            factory = new ProductFactory1();\n        } else if (ch == \'2\') {\n            factory = new ProductFactory2();\n        } else if (ch == \'3\') {\n            factory = new ProductFactory3();\n        }\n        if (factory != null) {\n            return factory.createProduct(productNo);\n        }\n        return null;\n    }\n}\n```\n\n**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**\n\n##7	建造者（Builder）模式\n\n**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**\n\n比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。\n\n`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。\n\n###7.1	实例\n\n创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：\n\n```java\npublic class TicketHelper {\n    public void buildAdult(String info) {\n        System.out.println(\"构建成年人票逻辑：\" + info);\n    }\n\n    public void buildChildrenForSeat(String info) {\n        System.out.println(\"构建有座儿童票逻辑：\" + info);\n    }\n\n    public void buildChildrenForNoSeat(String info) {\n        System.out.println(\"构建无座儿童票逻辑：\" + info);\n    }\n\n    public void buildElderly(String info) {\n        System.out.println(\"构建老年人票逻辑：\" + info);\n    }\n\n    public void buildSoldier(String info) {\n        System.out.println(\"构建军人及其家属票逻辑：\" + info);\n    }\n}\n```\n\n然后，需要一个构造类——`TicketBuilder`，代码如下：\n\n```java\npublic class TicketBuilder {\n    public static Object builder(TicketHelper helper){\n        System.out.println(\"通过TicketHelper构建套票信息\");\n        return null;\n    }\n}\n```\n\n通过这两个类就可以构建出套票，代码如下：\n\n```java\npublic class TestBuilder {\n    @Test\n    public void testBuilder() {\n        TicketHelper helper = new TicketHelper();\n        helper.buildAdult(\"成人票\");\n        helper.buildChildrenForSeat(\"有座儿童\");\n        helper.buildChildrenForNoSeat(\"无座儿童\");\n        helper.buildElderly(\"老年人票\");\n        helper.buildSoldier(\"军人票\");\n        Object ticket = TicketBuilder.builder(helper);\n    }\n}\n```\n\n本文参考杨开振的《JavaEE互联网轻量级框架整合开发》', '/static/admin/img/2.png', 1, 14, 2, 0, b'0', b'1', b'1', b'1', b'1', 5, 1, 1, 2, '2020-06-15 10:45:55', '2020-06-15 11:43:25');
INSERT INTO `t_article` VALUES (3, '认识Mybatis核心组件', 'JavaEE互联网轻量级框架整合开发第三章', '<h2 id=\"h2-1-mybatis-\"><a name=\"1    持久层的概念和MyBatis的特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1    持久层的概念和MyBatis的特点</h2><p>持久层可以将业务数据存储到磁盘，具有长期存储能力。</p>\n<p>Mybatis成功的原因：</p>\n<ul>\n<li>不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</li><li>提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</li><li>提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</li></ul>\n<h2 id=\"h2-2-mybatis-\"><a name=\"2    MyBatis的核心组件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2    MyBatis的核心组件</h2><p>Mybatis的核心组件分为4个部分：</p>\n<ul>\n<li><code>SqlSessionFactoryBuilder</code>（构造器）:它会根据配置或者代码来生成<code>SqlSessionFactory</code>，采用的是分步构建的建造者模式。</li><li><code>SqlSessionFactory</code>（工厂接口）：依靠它来生成<code>SqlSession</code>，使用的是工厂模式。</li><li><code>SqlSession</code>（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</li><li><code>SQL Mapper</code>（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul>\n<p>MyBatis核心组件如图1所示:</p>\n<p><img src=\"http://cdn.alanliang.site/note/Mybatis核心组件.jpg\" alt=\"Mybatis核心组件\"></p>\n<p>&lt;center&gt;图1 MyBatis核心组件&lt;/center&gt;\n\n</p>\n<h2 id=\"h2-3-code-sqlsessionfactory-code-\"><a name=\"3    <code>SqlSessionFactory</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3    <code>SqlSessionFactory</code></h2><p>为了生成<code>SqlSessionFactory</code>，MyBatis提供了构造器<code>SqlSessionFactoryBuilder</code>，它提供了一个类<code>Configuration</code>作为引导类，采用了<code>builder</code>模式，具体的分步则是在<code>Configuration</code>类中完成。</p>\n<p>当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过<code>Configuration</code>类对象构建整个MyBatis的上下文。<code>SqlSessionFactory</code>是一个接口，有两个实现类，一般由<code>DefaultSqlSessionFactory</code>去实现，它们之间的关系如图2所示：</p>\n<p><img src=\"http://cdn.alanliang.site/note/SqlSessionFactory的生成.jpg\" alt=\"SqlSessionFactory的生成\"></p>\n<p>&lt;center&gt;图1 SqlSessionFactory与其实现类&lt;/center&gt;\n\n</p>\n<h4 id=\"h4-3-1-xml-code-sqlsessionfactory-code-\"><a name=\"3.1    使用XML构建<code>SqlSessionFactory</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.1    使用XML构建<code>SqlSessionFactory</code></h4><p>在MyBatis中的XML分为两类：</p>\n<ul>\n<li>一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</li><li>一类是映射文件，用来配置映射关系、SQL、参数等信息</li></ul>\n<p>创建一份简易的基础配置文件，我们把它命名为<code>mybatis-config.xml</code>，代码如下：</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;!--别名--&gt;\n    &lt;typeAliases&gt;\n        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;\n    &lt;/typeAliases&gt;\n    &lt;!--数据库环境--&gt;\n    &lt;environments default=&quot;development&quot;&gt;\n        &lt;environment id=&quot;development&quot;&gt;\n            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;\n            &lt;dataSource type=&quot;POOLED&quot;&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn/&quot;/&gt;\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n    &lt;!--映射文件--&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre>\n<p>生成<code>SqlSessionFactory</code>，代码如下：</p>\n<pre><code class=\"lang-java\">public class TestMyBatis {\n    SqlSessionFactory sqlSessionFactory = null;\n\n    String resource = &quot;mybatis-config.xml&quot;;\n\n    InputStream inputStream;\n\n    @Test\n    public void testSqlSessionFactory() {\n        try {\n            //读取mybatis-config.xml\n            inputStream = Resources.getResourceAsStream(resource);\n            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n<h2 id=\"h2-4-code-sqlsession-code-\"><a name=\"4    <code>SqlSession</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4    <code>SqlSession</code></h2><p>在MyBatis中，<code>SqlSession</code>是其核心接口，作用类似于<code>JDBC</code>中的<code>Connnection</code>对象，代表一个连接资源的启用。</p>\n<p>具体而言，它的作用有3个：</p>\n<ul>\n<li>获取Mapper接口。</li><li>发送SQL给数据库。</li><li>控制数据库事务。</li></ul>\n<p>创建方法如下：</p>\n<pre><code class=\"lang-java\">SqlSession sqlSession = SqlSessionFactory.openSession();\n</code></pre>\n<p><code>SqlSession</code>控制数据库事务的方法，代码如下：</p>\n<pre><code class=\"lang-java\">SqlSession sqlSession = null;\ntry {\n    //打开SqlSession会话\n    sqlSession = sqlSessionFactory.openSession();\n    //some code...\n    sqlSession.commit();//提交事务\n} catch (Exception e) {\n    sqlSession.rollback();//回滚事务\n} finally {\n    //在finally语句中确保资源被顺利关闭\n    if (sqlSession != null) {\n        sqlSession.close();\n    }\n}\n</code></pre>\n<h2 id=\"h2-5-\"><a name=\"5    映射器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5    映射器</h2><p>映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</p>\n<ul>\n<li>描述映射规则</li><li>提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</li><li>配置缓存</li><li>提供动态SQL</li></ul>\n<p>映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</p>\n<h3 id=\"h3-5-1-xml-\"><a name=\"5.1    用XML实现映射器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.1    用XML实现映射器</h3><p>定义接口，代码如下：</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;\n   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;\n       select id,role_name as roleName,note from t_role where id = #{id}\n   &lt;/select&gt;\n&lt;/mapper&gt;\n</code></pre>\n<ul>\n<li>mapper中namespace的值对应于所映射接口的全限定名</li><li>select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</li><li>#{id}表示传递进去的参数</li></ul>\n<p>MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</p>\n<h3 id=\"h3-5-2-\"><a name=\"5.2    用注解实现映射器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.2    用注解实现映射器</h3><pre><code class=\"lang-java\">public interface RoleMapper2 {\n    @Select(&quot;select id, role_name as roleName, note from t_role where id = #{id}&quot;)\n    public Role getRole(Long id);\n}\n</code></pre>\n<h3 id=\"h3-5-3-xml-\"><a name=\"5.3    对比XML方式和注解方式实现映射器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.3    对比XML方式和注解方式实现映射器</h3><p>注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</p>\n<p>这个接口也可以在XML中定义，例如只需将<code>mybatis-config.xml</code>中配置XML语句：</p>\n<pre><code class=\"lang-xml\">  &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;\n</code></pre>\n<p>修改成下面的形式即可：</p>\n<pre><code class=\"lang-xml\">&lt;mapper class=&quot;com.ssm.learn.chapter3.mapper.RoleMapper2&quot;/&gt;\n</code></pre>\n<p>也可以使用<code>configuration</code>对象注册这个接口，比如：</p>\n<pre><code class=\"lang-java\">configuration.addMapper(RoleMapper2.class)；\n</code></pre>\n<h3 id=\"h3-5-4-code-sqlsession-code-sql\"><a name=\"5.4    <code>SqlSession</code>发送SQL\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.4    <code>SqlSession</code>发送SQL</h3><pre><code class=\"lang-java\">Role role = (Role)sqlSession.selectOne(&quot;com.ssm.learn.chapter3.mapper.RoleMapper.getRole&quot;, 1L);\n</code></pre>\n<p><code>selectOne</code>方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为<code>getRole</code>的SQL，则可以简写为：</p>\n<pre><code class=\"lang-java\">Role role = (Role)sqlSession.selectOne(&quot;getRole&quot;, 1L);\n</code></pre>\n<h3 id=\"h3-5-5-code-mapper-code-sql\"><a name=\"5.5    用<code>Mapper</code>接口发送SQL\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.5    用<code>Mapper</code>接口发送SQL</h3><p><code>SqlSession</code>还可以获取<code>Mapper</code>接口，通过<code>Mapper</code>接口发送SQL，代码如下：</p>\n<pre><code class=\"lang-java\">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);\nRole role = roleMapper.getRole(1L);\n</code></pre>\n<p>因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</p>\n<h3 id=\"h3-5-6-sql-\"><a name=\"5.6    对比两种发送SQL的方式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.6    对比两种发送SQL的方式</h3><ul>\n<li><p>使用<code>SqlSession</code>直接发送</p>\n</li><li><p><code>SqlSession</code>获取<code>Mapper</code>接口，再通过<code>Mapper</code>发送</p>\n</li></ul>\n<p>使用<code>Mapper</code>接口编程可以消除<code>SqlSession</code>带来的功能性代码，提高可读性。<code>SqlSession</code>需要<code>SQLid</code>，晦涩难懂，而<code>Mapper</code>更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用<code>Mapper</code>接口编程。</p>\n<h2 id=\"h2-6-\"><a name=\"6    生命周期\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6    生命周期</h2><p>所谓生命周期就是每一个对象应该存活的时间。</p>\n<h3 id=\"h3-6-1-code-sqlsessionfactorybuilder-code-\"><a name=\"6.1    <code>SqlSessionFactoryBuilder</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.1    <code>SqlSessionFactoryBuilder</code></h3><p>其作用在于创建<code>SqlSessionFactory</code>，创建成功后就失去作用，所以它只能存在于创建<code>SqlSessionFactory</code>的方法中，而不能让其长期存在。</p>\n<h3 id=\"h3-6-2-code-sqlsessionfactory-code-\"><a name=\"6.2    <code>SqlSessionFactory</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.2    <code>SqlSessionFactory</code></h3><p>可以被认为是数据库连接池，其作用是创建<code>SqlSession</code>接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个<code>SqlSessionFactory</code>可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</p>\n<h3 id=\"h3-6-3-code-sqlsession-code-\"><a name=\"6.3    <code>SqlSession</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.3    <code>SqlSession</code></h3><p>相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至<code>SqlSessionFactory</code>，否则可能会导致数据库资源耗尽。</p>\n<h3 id=\"h3-6-4-code-mapper-code-\"><a name=\"6.4    <code>Mapper</code>\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.4    <code>Mapper</code></h3><p>它由<code>SqlSession</code>创建，所以它的生命周期至多和<code>SqlSession</code>保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</p>\n<h2 id=\"h2-7-\"><a name=\"7    实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7    实例</h2><p>项目结构如图：</p>\n<p><img src=\"http://cdn.alanliang.site/note/项目结构.png\" alt=\"项目结构\"></p>\n<p><code>log4j.properties</code>文件，代码如下：</p>\n<pre><code class=\"lang-properties\">log4j.rootLogger=DEBUG, stdout\nlog4j.logger.org.mybatis=DEBUG\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n\n</code></pre>\n<p><code>Role</code>类，代码如下：</p>\n<pre><code class=\"lang-java\">public class Role {\n    private Long id;\n    private String roleName;\n    private String note;\n\n    public Role() {}\n    /*setter and getter*/\n}\n</code></pre>\n<p><code>RoleMapper</code>接口，代码如下：</p>\n<pre><code class=\"lang-java\">public interface RoleMapper {\n    int insertRole(Role role);\n    int deleteRole(Long id);\n    int updateROle(Role role);\n    Role getRole(Long id);\n    List&lt;Role&gt; findRoles(String roleName);\n}\n</code></pre>\n<p><code>RoleMapper.xml</code>文件，代码如下：</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;\n    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;\n        insert into t_role(role_name,note)  values (#{roleName},#{note});\n    &lt;/insert&gt;\n    &lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;\n        delete from t_role where id = #{id};\n    &lt;/delete&gt;\n    &lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;\n        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};\n    &lt;/update&gt;\n    &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;\n       select id,role_name as roleName,note from t_role where id = #{id};\n   &lt;/select&gt;\n    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultType=&quot;role&quot;&gt;\n        select id,role_name as roleName,note from t_role where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)\n    &lt;/select&gt;\n&lt;/mapper&gt;\n</code></pre>\n<p><code>SqlSessionFactoryUtils</code>工具类，代码如下：</p>\n<pre><code class=\"lang-java\">public class SqlSessionFactoryUtils {\n    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;\n\n    private static SqlSessionFactory sqlSessionFactory = null;\n\n    private SqlSessionFactoryUtils() {\n\n    }\n\n    public static SqlSessionFactory getSqlSessionFactory() {\n        synchronized (LOCK) {\n            if (sqlSessionFactory != null) {\n                return sqlSessionFactory;\n            } else {\n                String resource = &quot;mybatis-config.xml&quot;;\n                InputStream inputStream;\n                try {\n                    inputStream = Resources.getResourceAsStream(resource);\n                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    return null;\n                }\n                return sqlSessionFactory;\n            }\n        }\n    }\n\n    public static SqlSession openSqlSession() {\n        if (sqlSessionFactory == null) {\n            getSqlSessionFactory();\n        }\n        return sqlSessionFactory.openSession();\n    }\n}\n</code></pre>\n<p>其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入<code>synchronized</code>关键字加锁，主要是防止在多线程中多次实例化<code>SqlSessionFactory</code>对象，保证唯一性。</p>\n<p><code>mybatis-config.xml</code>文件，代码如下：</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;!--别名--&gt;\n    &lt;typeAliases&gt;\n        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;\n    &lt;/typeAliases&gt;\n    &lt;!--数据库环境--&gt;\n    &lt;environments default=&quot;development&quot;&gt;\n        &lt;environment id=&quot;development&quot;&gt;\n            &lt;!--配置事务管理器--&gt;\n            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;\n            &lt;!--配置数据源--&gt;\n            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n    &lt;!--映射文件--&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre>\n<p><code>Chapter3Main</code>类，代码如下：</p>\n<pre><code class=\"lang-java\">public class Chapter3Main {\n    public static void main(String[] args) {\n        Logger logger = Logger.getLogger(Chapter3Main.class);\n        SqlSession sqlSession = null;\n        try {\n            sqlSession = SqlSessionFactoryUtils.openSqlSession();\n            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);\n            Role role = mapper.getRole(1L);\n            logger.info(role.getRoleName());\n        } finally {\n            if (sqlSession != null) {\n                sqlSession.close();\n            }\n        }\n\n    }\n}\n</code></pre>\n<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>\n', '\n\n##1	持久层的概念和MyBatis的特点\n\n持久层可以将业务数据存储到磁盘，具有长期存储能力。\n\nMybatis成功的原因：\n\n- 不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；\n- 提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；\n- 提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。\n\n##2    MyBatis的核心组件\n\nMybatis的核心组件分为4个部分：\n\n- `SqlSessionFactoryBuilder`（构造器）:它会根据配置或者代码来生成`SqlSessionFactory`，采用的是分步构建的建造者模式。\n- `SqlSessionFactory`（工厂接口）：依靠它来生成`SqlSession`，使用的是工厂模式。\n- `SqlSession`（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。\n- `SQL Mapper`（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。\n\nMyBatis核心组件如图1所示:\n\n![Mybatis核心组件](http://cdn.alanliang.site/note/Mybatis核心组件.jpg)\n\n<center>图1 MyBatis核心组件</center>\n\n##3	`SqlSessionFactory`\n\n为了生成`SqlSessionFactory`，MyBatis提供了构造器`SqlSessionFactoryBuilder`，它提供了一个类`Configuration`作为引导类，采用了`builder`模式，具体的分步则是在`Configuration`类中完成。\n\n当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过`Configuration`类对象构建整个MyBatis的上下文。`SqlSessionFactory`是一个接口，有两个实现类，一般由`DefaultSqlSessionFactory`去实现，它们之间的关系如图2所示：\n\n![SqlSessionFactory的生成](http://cdn.alanliang.site/note/SqlSessionFactory的生成.jpg)\n\n<center>图1 SqlSessionFactory与其实现类</center>\n\n####3.1	使用XML构建`SqlSessionFactory`\n\n在MyBatis中的XML分为两类：\n\n- 一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境\n- 一类是映射文件，用来配置映射关系、SQL、参数等信息\n\n创建一份简易的基础配置文件，我们把它命名为`mybatis-config.xml`，代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!--别名-->\n    <typeAliases>\n        <typeAlias alias=\"role\" type=\"com.ssm.learn.chapter3.pojo.Role\"/>\n    </typeAliases>\n    <!--数据库环境-->\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm_learn/\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"1234\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!--映射文件-->\n    <mappers>\n        <mapper resource=\"com/ssm/learn/chapter3/mapper/RoleMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n生成`SqlSessionFactory`，代码如下：\n\n```java\npublic class TestMyBatis {\n    SqlSessionFactory sqlSessionFactory = null;\n\n    String resource = \"mybatis-config.xml\";\n\n    InputStream inputStream;\n\n    @Test\n    public void testSqlSessionFactory() {\n        try {\n            //读取mybatis-config.xml\n            inputStream = Resources.getResourceAsStream(resource);\n            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n##4	`SqlSession`\n\n在MyBatis中，`SqlSession`是其核心接口，作用类似于`JDBC`中的`Connnection`对象，代表一个连接资源的启用。\n\n具体而言，它的作用有3个：\n\n- 获取Mapper接口。\n- 发送SQL给数据库。\n- 控制数据库事务。\n\n创建方法如下：\n\n```java\nSqlSession sqlSession = SqlSessionFactory.openSession();\n```\n\n`SqlSession`控制数据库事务的方法，代码如下：\n\n```java\nSqlSession sqlSession = null;\ntry {\n    //打开SqlSession会话\n    sqlSession = sqlSessionFactory.openSession();\n    //some code...\n    sqlSession.commit();//提交事务\n} catch (Exception e) {\n    sqlSession.rollback();//回滚事务\n} finally {\n    //在finally语句中确保资源被顺利关闭\n    if (sqlSession != null) {\n        sqlSession.close();\n    }\n}\n```\n\n##5	映射器\n\n映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：\n\n- 描述映射规则\n- 提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息\n- 配置缓存\n- 提供动态SQL\n\n映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。\n\n###5.1	用XML实现映射器\n\n定义接口，代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.ssm.learn.chapter3.mapper.RoleMapper\"><!--namespace对应接口的全限定名-->\n   <select id=\"getRole\" parameterType=\"long\" resultType=\"role\">\n       select id,role_name as roleName,note from t_role where id = #{id}\n   </select>\n</mapper>\n```\n\n- mapper中namespace的值对应于所映射接口的全限定名\n- select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型\n- \\#{id}表示传递进去的参数\n\nMyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。\n\n###5.2	用注解实现映射器\n\n```java\npublic interface RoleMapper2 {\n    @Select(\"select id, role_name as roleName, note from t_role where id = #{id}\")\n    public Role getRole(Long id);\n}\n```\n\n###5.3	对比XML方式和注解方式实现映射器\n\n注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式\n\n这个接口也可以在XML中定义，例如只需将`mybatis-config.xml`中配置XML语句：\n\n```xml\n  <mapper resource=\"com/ssm/learn/chapter3/mapper/RoleMapper.xml\"/>\n```\n\n修改成下面的形式即可：\n\n```xml\n<mapper class=\"com.ssm.learn.chapter3.mapper.RoleMapper2\"/>\n```\n\n也可以使用`configuration`对象注册这个接口，比如：\n\n```java\nconfiguration.addMapper(RoleMapper2.class)；\n```\n\n###5.4	`SqlSession`发送SQL\n\n```java\nRole role = (Role)sqlSession.selectOne(\"com.ssm.learn.chapter3.mapper.RoleMapper.getRole\", 1L);\n```\n\n`selectOne`方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为`getRole`的SQL，则可以简写为：\n\n```java\nRole role = (Role)sqlSession.selectOne(\"getRole\", 1L);\n```\n\n###5.5	用`Mapper`接口发送SQL\n\n`SqlSession`还可以获取`Mapper`接口，通过`Mapper`接口发送SQL，代码如下：\n\n```java\nRoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);\nRole role = roleMapper.getRole(1L);\n```\n\n因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。\n\n###5.6	对比两种发送SQL的方式\n\n- 使用`SqlSession`直接发送\n\n- `SqlSession`获取`Mapper`接口，再通过`Mapper`发送\n\n使用`Mapper`接口编程可以消除`SqlSession`带来的功能性代码，提高可读性。`SqlSession`需要`SQLid`，晦涩难懂，而`Mapper`更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用`Mapper`接口编程。\n\n##6	生命周期\n\n所谓生命周期就是每一个对象应该存活的时间。\n\n###6.1	`SqlSessionFactoryBuilder`\n\n其作用在于创建`SqlSessionFactory`，创建成功后就失去作用，所以它只能存在于创建`SqlSessionFactory`的方法中，而不能让其长期存在。\n\n###6.2	`SqlSessionFactory`\n\n可以被认为是数据库连接池，其作用是创建`SqlSession`接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个`SqlSessionFactory`可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。\n\n###6.3	`SqlSession`\n\n相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至`SqlSessionFactory`，否则可能会导致数据库资源耗尽。\n\n###6.4	`Mapper`\n\n它由`SqlSession`创建，所以它的生命周期至多和`SqlSession`保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。\n\n##7	实例\n\n项目结构如图：\n\n![项目结构](http://cdn.alanliang.site/note/项目结构.png)\n\n`log4j.properties`文件，代码如下：\n\n```properties\nlog4j.rootLogger=DEBUG, stdout\nlog4j.logger.org.mybatis=DEBUG\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n\n```\n\n`Role`类，代码如下：\n\n```java\npublic class Role {\n    private Long id;\n    private String roleName;\n    private String note;\n    \n    public Role() {}\n    /*setter and getter*/\n}\n```\n\n`RoleMapper`接口，代码如下：\n\n```java\npublic interface RoleMapper {\n    int insertRole(Role role);\n    int deleteRole(Long id);\n    int updateROle(Role role);\n    Role getRole(Long id);\n    List<Role> findRoles(String roleName);\n}\n```\n\n`RoleMapper.xml`文件，代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.ssm.learn.chapter3.mapper.RoleMapper\"><!--namespace对应接口的全限定名-->\n    <insert id=\"insertRole\" parameterType=\"role\">\n        insert into t_role(role_name,note)  values (#{roleName},#{note});\n    </insert>\n    <delete id=\"deleteRole\" parameterType=\"long\">\n        delete from t_role where id = #{id};\n    </delete>\n    <update id=\"updateRole\" parameterType=\"role\">\n        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};\n    </update>\n    <select id=\"getRole\" parameterType=\"long\" resultType=\"role\">\n       select id,role_name as roleName,note from t_role where id = #{id};\n   </select>\n    <select id=\"findRoles\" parameterType=\"string\" resultType=\"role\">\n        select id,role_name as roleName,note from t_role where role_name like concat(\'%\',#{roleName},\'%\')\n    </select>\n</mapper>\n```\n\n`SqlSessionFactoryUtils`工具类，代码如下：\n\n```java\npublic class SqlSessionFactoryUtils {\n    private final static Class<SqlSessionFactoryUtils> LOCK = SqlSessionFactoryUtils.class;\n\n    private static SqlSessionFactory sqlSessionFactory = null;\n\n    private SqlSessionFactoryUtils() {\n\n    }\n\n    public static SqlSessionFactory getSqlSessionFactory() {\n        synchronized (LOCK) {\n            if (sqlSessionFactory != null) {\n                return sqlSessionFactory;\n            } else {\n                String resource = \"mybatis-config.xml\";\n                InputStream inputStream;\n                try {\n                    inputStream = Resources.getResourceAsStream(resource);\n                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    return null;\n                }\n                return sqlSessionFactory;\n            }\n        }\n    }\n\n    public static SqlSession openSqlSession() {\n        if (sqlSessionFactory == null) {\n            getSqlSessionFactory();\n        }\n        return sqlSessionFactory.openSession();\n    }\n}\n```\n\n其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入`synchronized`关键字加锁，主要是防止在多线程中多次实例化`SqlSessionFactory`对象，保证唯一性。\n\n`mybatis-config.xml`文件，代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!--别名-->\n    <typeAliases>\n        <typeAlias alias=\"role\" type=\"com.ssm.learn.chapter3.pojo.Role\"/>\n    </typeAliases>\n    <!--数据库环境-->\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <!--配置事务管理器-->\n            <transactionManager type=\"JDBC\"></transactionManager>\n            <!--配置数据源-->\n            <dataSource type=\"POOLED\"><!--type=\"POOLED\"表示采用MyBatis内部连接池-->\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm_learn\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"1234\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!--映射文件-->\n    <mappers>\n        <mapper resource=\"com/ssm/learn/chapter3/mapper/RoleMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n`Chapter3Main`类，代码如下：\n\n```java\npublic class Chapter3Main {\n    public static void main(String[] args) {\n        Logger logger = Logger.getLogger(Chapter3Main.class);\n        SqlSession sqlSession = null;\n        try {\n            sqlSession = SqlSessionFactoryUtils.openSqlSession();\n            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);\n            Role role = mapper.getRole(1L);\n            logger.info(role.getRoleName());\n        } finally {\n            if (sqlSession != null) {\n                sqlSession.close();\n            }\n        }\n\n    }\n}\n```\n\n本文参考杨开振的《JavaEE互联网轻量级框架整合开发》', '/static/admin/img/3.jpg', 1, 3, 0, 1, b'0', b'1', b'0', b'0', b'1', 3, 1, 1, 2, '2020-06-15 11:02:52', '2020-06-15 11:02:52');
INSERT INTO `t_article` VALUES (27, 'ssss', 'sss', '<p>sdfsdfsdfsdfsd</p>\n', 'sdfsdfsdfsdfsd', '/static/admin/img/1.jpg', 1, 1, 0, 0, b'0', b'1', b'0', b'0', b'1', 2, 1, 4, 2, '2021-03-19 19:53:03', '2021-03-19 19:53:03');
INSERT INTO `t_article` VALUES (28, 'ElasticSearch', '测试搜索功能', '<p>这个是测试搜索功能使用</p>\n', '这个是测试搜索功能使用', '/static/admin/img/1.jpg', 1, 3, 0, 0, b'0', b'1', b'0', b'0', b'1', 1, 1, 5, 2, '2021-03-22 16:27:03', '2021-03-22 16:27:03');

-- ----------------------------
-- Table structure for t_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_article_tag`;
CREATE TABLE `t_article_tag`  (
  `article_id` bigint(20) NOT NULL COMMENT '文章ID',
  `tag_id` bigint(20) NOT NULL COMMENT '标签ID',
  PRIMARY KEY (`article_id`, `tag_id`) USING BTREE,
  INDEX `fk_tag_tagid`(`tag_id`) USING BTREE,
  CONSTRAINT `t_article_tag_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `t_article` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `t_article_tag_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `t_tag` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_article_tag
-- ----------------------------
INSERT INTO `t_article_tag` VALUES (1, 13);
INSERT INTO `t_article_tag` VALUES (28, 13);
INSERT INTO `t_article_tag` VALUES (1, 14);
INSERT INTO `t_article_tag` VALUES (1, 15);
INSERT INTO `t_article_tag` VALUES (3, 15);
INSERT INTO `t_article_tag` VALUES (1, 16);
INSERT INTO `t_article_tag` VALUES (2, 17);
INSERT INTO `t_article_tag` VALUES (27, 17);
INSERT INTO `t_article_tag` VALUES (2, 18);
INSERT INTO `t_article_tag` VALUES (3, 19);

-- ----------------------------
-- Table structure for t_category
-- ----------------------------
DROP TABLE IF EXISTS `t_category`;
CREATE TABLE `t_category`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '名称',
  `display` bit(1) NULL DEFAULT NULL COMMENT '是否前台显示',
  `introduction` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简介',
  `color` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '颜色',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `idx_t_category_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_category
-- ----------------------------
INSERT INTO `t_category` VALUES (1, '读书笔记1', b'1', '-', '#D5F5E3', '2020-06-14 19:34:04', '2020-08-22 19:58:55');
INSERT INTO `t_category` VALUES (2, '错误日志', b'1', '-', '#E8F8F5', '2020-06-14 19:34:33', '2020-06-14 19:34:33');
INSERT INTO `t_category` VALUES (3, '项目总结', b'1', '-', '#82E0AA', '2020-06-14 19:34:53', '2020-06-14 19:34:53');
INSERT INTO `t_category` VALUES (4, '工具技巧', b'1', '-', '#A3E4D7', '2020-06-14 19:35:10', '2020-06-14 19:35:10');
INSERT INTO `t_category` VALUES (5, '他人优秀笔记', b'1', '-', '#FEF9E7', '2020-06-14 19:35:30', '2020-06-14 19:35:30');
INSERT INTO `t_category` VALUES (6, '思考感悟', b'1', '-', '#85C1E9', '2020-06-14 19:35:42', '2020-06-14 19:35:42');
INSERT INTO `t_category` VALUES (7, '数据结构与算法', b'1', '-', '#82E0AA', '2020-08-22 20:06:39', '2020-08-22 20:06:39');

-- ----------------------------
-- Table structure for t_photo
-- ----------------------------
DROP TABLE IF EXISTS `t_photo`;
CREATE TABLE `t_photo`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '地址',
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `sort` smallint(4) NULL DEFAULT NULL COMMENT '排序值',
  `display` bit(1) NULL DEFAULT NULL COMMENT '是否前台显示',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_photo_sort`(`sort`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 38 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_photo
-- ----------------------------
INSERT INTO `t_photo` VALUES (9, '/admin/img/1.jpg', '油画1', 1, b'1', '2020-06-15 16:55:15', '2021-03-16 21:21:29');
INSERT INTO `t_photo` VALUES (10, '/admin/img/2.png', '油画2', 2, b'1', '2020-06-15 16:55:36', '2021-03-16 21:08:53');
INSERT INTO `t_photo` VALUES (11, '/admin/img/3.jpg', '油画3', 3, b'1', '2020-06-15 16:55:50', '2021-03-16 21:09:29');
INSERT INTO `t_photo` VALUES (12, '/admin/img/4.jpg', '油画4', 4, b'1', '2020-06-15 16:56:08', '2021-03-16 21:09:43');
INSERT INTO `t_photo` VALUES (13, '/admin/img/5.jpg', '油画5', 5, b'1', '2020-06-15 16:56:30', '2021-03-16 21:09:57');
INSERT INTO `t_photo` VALUES (18, '/admin/img/1.jpg', 'dd', 1, b'1', '2021-03-16 22:47:08', '2021-03-16 22:47:08');
INSERT INTO `t_photo` VALUES (37, '/admin/img/6.jpg', '1', 1, b'1', '2021-03-18 01:45:46', '2021-03-18 01:45:46');

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '名称',
  `color` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '颜色',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_t_tag_name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (13, '精神科', '#E8F8F5', '2020-06-14 19:40:03', '2021-03-20 19:54:31');
INSERT INTO `t_tag` VALUES (14, 'SpringMVC', '#82E0AA', '2020-06-15 08:54:38', '2020-06-15 08:55:57');
INSERT INTO `t_tag` VALUES (15, 'Mybatis', '#A3E4D7', '2020-06-15 08:54:38', '2020-06-15 08:57:10');
INSERT INTO `t_tag` VALUES (16, 'Redis', '#FEF9E7', '2020-06-15 08:54:38', '2020-06-15 08:57:22');
INSERT INTO `t_tag` VALUES (17, '设计模式', '#F9E79F', '2020-06-15 10:45:55', '2020-06-15 10:51:50');
INSERT INTO `t_tag` VALUES (18, '反射技术', '#F8C471', '2020-06-15 10:45:55', '2020-06-15 10:52:06');
INSERT INTO `t_tag` VALUES (19, ' MyBatis核心组件', '#F9EBEA', '2020-06-15 11:02:52', '2020-06-15 11:27:41');
INSERT INTO `t_tag` VALUES (20, 'Mybatis配置', '#85C1E9', '2020-06-15 11:05:28', '2020-06-15 11:27:52');
INSERT INTO `t_tag` VALUES (21, 'Mybatis映射器', '#19CAAD', '2020-06-15 11:08:33', '2020-06-15 11:28:02');
INSERT INTO `t_tag` VALUES (23, '装配Bean', '#A0EEE1', '2020-06-15 11:32:09', '2020-06-15 11:50:33');
INSERT INTO `t_tag` VALUES (24, 'SpringMVC组件开发', '#BEE7E9', '2020-06-15 11:50:17', '2020-06-15 11:50:42');
INSERT INTO `t_tag` VALUES (25, 'SpringBoot', '#BEEDC7', '2020-06-15 11:56:47', '2020-06-15 12:03:19');
INSERT INTO `t_tag` VALUES (26, 'SpringSecurity', '#00CCFF', '2020-06-15 11:56:47', '2020-06-15 12:04:57');
INSERT INTO `t_tag` VALUES (27, 'Vue', '#D5F5E3', '2020-06-15 12:34:05', '2020-06-15 12:34:05');
INSERT INTO `t_tag` VALUES (28, '算法', '#F8C471', '2020-08-22 20:07:04', '2020-08-22 20:07:04');

-- ----------------------------
-- Table structure for units
-- ----------------------------
DROP TABLE IF EXISTS `units`;
CREATE TABLE `units`  (
  `unitsId` int(10) NOT NULL AUTO_INCREMENT COMMENT '单位ID',
  `unitsName` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '单位名',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`unitsId`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of units
-- ----------------------------
INSERT INTO `units` VALUES (1, '包', '2021-03-05 13:03:40', '2021-03-05 13:03:43');
INSERT INTO `units` VALUES (2, '盒', '2021-03-05 13:03:46', '2021-03-05 13:03:49');
INSERT INTO `units` VALUES (3, '剂', '2021-03-05 13:03:53', '2021-03-05 13:03:56');
INSERT INTO `units` VALUES (4, '次', '2021-03-05 13:03:58', '2021-03-05 13:04:01');
INSERT INTO `units` VALUES (6, 'ddd', '2021-03-09 21:41:55', '2021-03-09 21:41:55');

-- ----------------------------
-- Table structure for worktime
-- ----------------------------
DROP TABLE IF EXISTS `worktime`;
CREATE TABLE `worktime`  (
  `workTimeId` int(10) NOT NULL COMMENT '排班id',
  `monday` tinyint(1) NULL DEFAULT NULL COMMENT '周一',
  `tuesday` tinyint(1) NULL DEFAULT NULL COMMENT '周二',
  `wednesday` tinyint(1) NULL DEFAULT NULL COMMENT '周三',
  `thursday` tinyint(1) NULL DEFAULT NULL COMMENT '周四',
  `friday` tinyint(1) NULL DEFAULT NULL COMMENT '周五',
  `saturday` tinyint(1) NULL DEFAULT NULL COMMENT '周六',
  `sunday` tinyint(1) NULL DEFAULT NULL COMMENT '周日',
  `doctorId` int(10) NULL DEFAULT NULL COMMENT '医生id',
  `createTime` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`workTimeId`) USING BTREE,
  INDEX `医生外键`(`doctorId`) USING BTREE,
  CONSTRAINT `医生外键` FOREIGN KEY (`doctorId`) REFERENCES `doctor` (`doctorId`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '这个是排班表' ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
